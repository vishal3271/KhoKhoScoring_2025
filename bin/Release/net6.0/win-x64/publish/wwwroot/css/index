var matchdrop=document.querySelector('#dropdown1');
if(matchdrop){
  matchdrop.addEventListener('change', function () {
    var tournamentId = this.value;
    var matchDropdown2 = document.querySelector('#dropdown2');

    matchDropdown2.innerHTML=''

    fetch(`${window.location.origin}/GetMatches?tournamentId=${tournamentId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.length > 0) {
          data.forEach(match => {
            const option = document.createElement('option');
            option.value=match.id;
            option.textContent = `${match.id} - ${match.name}`;
            matchDropdown2.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.value = "";
          option.textContent = "No matches found";
          matchDropdown2.appendChild(option);
        }
      })
      .catch(err => {
        console.error('Error fetching matches:', err);
      });
  });
}

var confirmNavigateButton = document.querySelector('#confirmNavigatetodataEnter');
if (confirmNavigateButton) {
  confirmNavigateButton.addEventListener('click', function () {
    var tournamentId = document.querySelector('#dropdown1').value;
    var matchElement = document.querySelector('#dropdown2');
    var matchNo = matchElement.value;
    var matchName = matchElement.options[matchElement.selectedIndex]?.text || ""; 

    if (!tournamentId || !matchNo) {
      alert('Please select both a tournament and a match.');
      return;
    }

    var url = `/dataEnter?tournamentId=${encodeURIComponent(tournamentId)}&matchNo=${encodeURIComponent(matchNo)}&matchName=${encodeURIComponent(matchName)}`;
    window.location.href = url;
  });
}

-----------------------------------index.cshtml---------------------
@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StartForm</title>
    <link rel="stylesheet" href="~/css/site.css">

</head>
<body>

<div class="container-form">
        <h2 class="text-center">TOURNAMENT / MATCH</h2>
        <form action="/Scoring" method="post">
            <div class="mb-3">
                <label for="dropdown1" class="form-label">TOURNAMENT</label>
                <select class="form-select" id="dropdown1" name="TournamentId" required>
                    <option value="" selected>Select an option</option>
                    @if (Model.TournamentList != null && Model.TournamentList.Any())
                    {    
                        @foreach(var stat in Model.TournamentList)
                        {
                            <option value="@stat.idTournament">@stat.Tournament_Name</option>
                        }
                    }   
                </select>
            </div>

            <div class="mb-3">
                <label for="dropdown2" class="form-label">MATCH</label>
                <select class="form-select" id="dropdown2" name="MatchId" required>
                </select>
            </div>
            <div class="text-end">
            <button type="button" class="btn" id="confirmNavigatetodataEnter">Go For Toss</button>
            </div>
        </form>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

<script>




</script>


</body>
</html>


---------------------------------------------------index.cs--------------------
[HttpGet("GetMatches")]
public async Task<IActionResult> GetMatches(string tournamentId)
{
    if (string.IsNullOrEmpty(tournamentId))
    {
        return BadRequest("Tournament ID is required.");
    }

       var matches = await _context.MatchMaster
        .Where(m => m.idTournament == tournamentId)
        .OrderByDescending(m => Convert.ToInt32(m.MatchNo))
        .Select(m => new { id = m.MatchNo, name = m.Match_Name,matchid=m.idMatch })
        .ToListAsync();

    if (matches == null || !matches.Any())
    {
        return NotFound("No matches found.");
    }
    return Ok(matches);
}
------------------------------------------------------------
      // [HttpGet("GetTossData")]
        // public async Task<IActionResult> GetTossData(string tournamentId, string matchNo)
        // {
        //     if (string.IsNullOrEmpty(tournamentId) || string.IsNullOrEmpty(matchNo))
        //     {
        //         return BadRequest("Tournament ID and Match No are required.");
        //     }


        //     var tossData = await _context.GetMatchNameTossDataScoring
        //         .FromSqlRaw("EXEC GetMatchNameTossData_Scoring @TournamentId = {0}, @MatchNo = {1}", tournamentId, matchNo)
        //         .ToListAsync();

        //     if (tossData == null || !tossData.Any())
        //     {
        //         return Json(new { message = "No toss data found" });
        //     }

        //     var result = tossData.Select(t => new { id = t.idTournament, winner = t.HomeTeam, loosing = t.AwayTeam }).ToList();
        //     return Json(result);
        // }