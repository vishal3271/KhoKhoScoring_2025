------------js----------------
var matchdrop=document.querySelector('#dropdown1');
if(matchdrop){
  matchdrop.addEventListener('change', function () {
    var tournamentId = this.value;
    var matchDropdown2 = document.querySelector('#dropdown2');

    matchDropdown2.innerHTML=''

    fetch(`${window.location.origin}/GetMatches?tournamentId=${tournamentId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.length > 0) {
          data.forEach(match => {
            const option = document.createElement('option');
            // option.value=match.matchid;
            option.value=JSON.stringify({ matchid: match.matchid, MatchNo: match.id });
            option.textContent = `${match.id} - ${match.name}`;
            matchDropdown2.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.value = "";
          option.textContent = "No matches found";
          matchDropdown2.appendChild(option);
        }
      })
      .catch(err => {
        console.error('Error fetching matches:', err);
      });
  });
}

var confirmNavigateButton = document.querySelector('#confirmNavigatetodataEnter');
if (confirmNavigateButton) {
  confirmNavigateButton.addEventListener('click', function () {
    var tournamentId = document.querySelector('#dropdown1').value;
    var matchElement = document.querySelector('#dropdown2');
    matchValue=matchElement.value;
    // var matchName = matchElement.options[matchElement.selectedIndex]?.text || ""; 

    var matchData;
    try {
      matchData = JSON.parse(matchValue);
    } catch (e) {
      console.error('Error parsing match value:', e);
      alert('Invalid match data. Please select again.');
      return;
    }

    var matchid = matchData.matchid;
    var MatchNo = matchData.MatchNo;

    if (!matchid || !MatchNo) {
      alert('Incomplete match data. Please select a valid match.');
      return;
    }


    if (!tournamentId || !matchid) {
      alert('Please select both a tournament and a match.');
      return;
    }

    var url = `/dataEnter?tournamentId=${encodeURIComponent(tournamentId)}&matchId=${encodeURIComponent(matchid)}&MatchNo=${encodeURIComponent(MatchNo)}`;
    window.location.href = url;
  });
}



document.addEventListener("DOMContentLoaded", function () {
    const updateButton = document.getElementById("save");
    if (updateButton) {
      updateButton.addEventListener("click", function () {
        const middleBox = document.querySelector(".middle-box");
        if (middleBox) {
          middleBox.style.display = "none";
        }
      });
    }
  });


document.addEventListener("DOMContentLoaded", function () {
    const updateButton = document.getElementById("toggleButton");
    if (updateButton) {
      updateButton.addEventListener("click", function () {
        const middleBox = document.querySelector(".middle-box");
        if (middleBox) {
          middleBox.style.display = "flex";
        }
      });
    }
  });

  function validateForm() {
    var teamselection
    var homePlayerNames = document.getElementsByName("homePlayerName[]");
    var homeBatchNos = document.getElementsByName("homeBatchNo[]");
    var homePlayerStatuses = document.getElementsByName("homePlayerStatus[]");

    if (homePlayerNames.length !== homeBatchNos.length || homePlayerNames.length !== homePlayerStatuses.length) {
        alert("All home team lists must have the same number of elements.");
        return false;
    }

    return true;
}

document.querySelectorAll('.data-form').forEach(select => {
  select.addEventListener('change', function () {
      this.value = this.value.trim();
  });
});

///filter player batchwise
function fetchBatchPlayers() {
  const urlParams = new URLSearchParams(window.location.search);
  const tournamentId = urlParams.get('tournamentId');
  const matchId = urlParams.get('matchId');
  const batchNo = document.getElementById('batchNoDropdown').value;
  const isAttacking = document.getElementById('isAttacking').value;

    console.log('Tournament ID:', tournamentId);
    console.log('Match ID:', matchId);
    console.log('Batch Number:', batchNo);
    console.log('Is Attacking:', isAttacking);

  fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&isAttacking=${isAttacking}&tournamentId=${tournamentId}&matchId=${matchId}`, {
      method: 'GET'
  })

  .then(response => {
              console.log('Response Status:', response.status); 
      if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
  })
  .then(data => {
    console.log('Fetched Data:', data);
      const playersList = document.getElementById('playersList');
      playersList.innerHTML = '';
      if (data.players && data.players.length > 0) {
        console.log('Players found:', data.players);
          data.players.forEach(player => {
              const li = document.createElement('li');
              li.innerHTML = `<button class="lstats-button">${player.playername}</button>`;
              playersList.appendChild(li);
          });
      } else {
        console.log('No players in play');
          playersList.innerHTML = '<li>No players in play</li>';
      }
  })
  .catch(error => console.error('Error fetching players:', error));
}


///timers
var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);

      // if (timerRunning) {
      //   alert('Please stop the timer before submitting stats!');
      //   return;
      // }

      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      const data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("data",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          // body: JSON.stringify(data)
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (result.success) {
              alert('Data added successfully!');
              location.reload();
          } else {
              alert('Error: ' + result.message);
          }
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


  ////retaining data for inning and turn
  function saveDropdownValues() {
    var inningValue = document.getElementById("inndropdown").value;
    var turnValue = document.getElementById("turndropdown").value;

    localStorage.setItem("inning", inningValue);
    localStorage.setItem("turn", turnValue);
}

function loadDropdownValues() {
    const savedInning = localStorage.getItem("inning");
    const savedTurn = localStorage.getItem("turn");

    if (savedInning) {
        document.getElementById("inndropdown").value = savedInning;
    }
    if (savedTurn) {
        document.getElementById("turndropdown").value = savedTurn;
    }
}

document.getElementById("inndropdown").addEventListener("change", saveDropdownValues);
document.getElementById("turndropdown").addEventListener("change", saveDropdownValues);

window.addEventListener("load", loadDropdownValues);


-----------------------scoring controller----------------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using _24IN_Ultimate_KHO_KHO_VS.Data;
using Newtonsoft.Json;

    
    public class ScoringController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<ScoringModel> _logger;


        public ScoringController(ApplicationDbContext context, ILogger<ScoringModel> logger)
        {
            _context = context;
            _logger=logger;
        }
        public List<Inning_Batch_Scoring> InningBatchScoringsList {get;set;}


[HttpGet]
public async Task<IActionResult> FilterPlayersByBatch(string batchNo, string tournamentId, string MatchId, int isAttacking)
{
    try
    {
        _logger.LogInformation($"Received parameters in batch dropdown- batchNo: {batchNo}, isAttacking: {isAttacking}, tournamentId: {tournamentId}, matchId: {MatchId}");
        var filteredPlayers = await _context.dataEnterPlayerDetailsScoring
            .Where(p => p.batchno == batchNo 
                        && p.idTournament == tournamentId 
                        && p.idMatch == MatchId 
                        && p.IsAttacking == 0 
                        && p.playerstatus.Trim() == "InPlay")
            .ToListAsync();

                    _logger.LogInformation($"Filtered players: {filteredPlayers.Count}");


        return Json(new { players = filteredPlayers });
    }
    catch (Exception ex)
    {
        _logger.LogError($"Error fetching players by batch: {ex.Message}");
        return StatusCode(500, "Internal server error");
    }
}

[HttpPost]
public async Task<IActionResult> AddStats([FromBody] InningBatchScoringRequest request)
{
    try
    {
    _logger.LogInformation("Received AddStats request: {@Request}", request);
    _logger.LogInformation("AttackingPlayerId: {AttackingPlayerId}, DefendingPlayerId: {DefendingPlayerId}, Inning: {Inning}, Turn: {Turn}, AttackingTeamId: {AttackingTeamId}, DefendingTeamId: {DefendingTeamId}, OutTypeId: {OutTypeId}, AppMatchId: {AppMatchId}",
    request?.AttackingPlayerId, request?.DefendingPlayerId, request?.Inning, request?.Turn, request?.AttackingTeamId, request?.DefendingTeamId, request?.OutTypeId, request?.AppMatchId);
    _logger.LogInformation("Raw JSON body: {Body}", await new StreamReader(Request.Body).ReadToEndAsync());



        int attackingPoints = 0;
        int defendingPoints = 0;

        if (request?.AttackingPlayerId > 0 && request?.DefendingPlayerId > 0)
        {
            attackingPoints = 2;
            defendingPoints = 0;
        }
        else if (request?.DefendingPlayerId > 0)
        {
            attackingPoints = 0;
            defendingPoints = 1;
        }

       var newEntry = new Inning_Batch_Scoring
        {
        attacker_id = request?.AttackingPlayerId ?? 0,
        defender_id = request?.DefendingPlayerId ?? 0,
        inning_number = request.Inning > 0 ? request.Inning : 0,
        Turn = request.Turn > 0 ? request.Turn : 0,
        attackingPoints = attackingPoints,
        defendingPoints=defendingPoints,
        attacking_team_id = request.AttackingTeamId > 0 ? request.AttackingTeamId : 0,
        defending_team_id  = request.DefendingTeamId > 0 ? request.DefendingTeamId : 0,
        out_type_id = request.OutTypeId > 0 ? request.OutTypeId : 0, 
        App_MatchId = string.IsNullOrEmpty(request.AppMatchId) ? "0" : request.AppMatchId,
        InningTimer=request?.InningTimer ?? "0",
        TurnTimer=request?.TurnTimer ?? "0"
        };
        _logger.LogInformation("Created new Inning_Batch_Scoring entry: {@NewEntry}", newEntry);

        await _context.InningBatchScoring.AddAsync(newEntry);
        await _context.SaveChangesAsync();


        return Json(new { success = true });
    }
    catch (Exception ex)
    {
        _logger.LogError($"Error adding stats: {ex.Message}");
        return Json(new { success = false, message = "An error occurred while adding stats." });
    }
}
    public class InningBatchScoringRequest
    {
        public int AttackingPlayerId { get; set; }
        public int DefendingPlayerId { get; set; }
        public int Inning { get; set; }
        public int Turn { get; set; }
        public int AttackingTeamId {get;set;}
        public int DefendingTeamId{get;set;}
        public int OutTypeId {get;set;}
        public string AppMatchId {get;set;}
        public string InningTimer {get;set;}
        public string TurnTimer {get;set;}
    }



}

----------------------------------scoring.cshtml-------------------------
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>


@* <button onclick="swapPanels()"> SWap</button> *@

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@attackingTeamId">@attackingTeamName</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />

            <div class="in-play">
                <div class="container-undo">
                    <h3>Attacking</h3>
                </div>
                <ul id="inPlayList">
                    @if (attackingTeamPlayers!= null && attackingTeamPlayers.Any())
                    {
                        foreach (var player in attackingTeamPlayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>

            <div class="in-bench">
                <h3>ON BENCH</h3>
                <ul id="inBenchList">
                     @if (attackingBenchPlayers!= null && attackingBenchPlayers.Any())
                    {
                        foreach (var player in attackingBenchPlayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="8">Dream Run</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="">Swap</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="">Undo</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>


    
    @* @if (Model.HowOutList != null && Model.HowOutList.Any())
    {
        for (int i = 0; i < Math.Max(Model.HowOutList.Count(), Model.InningBatchScoringsList.Count()); i++)
        {
            var stat = i < Model.HowOutList.Count() ? Model.HowOutList[i] : null;
            var scoring = i < Model.InningBatchScoringsList.Count() ? Model.InningBatchScoringsList[i] : null;

            <tr>
                <td value="@stat.OutId">@(scoring?.points ?? 0)</td>
                <td value="@stat.OutId">@(scoring?.points ?? 0)</td> 
               
                <td>
                    @if (stat != null)
                    {
                        <button class="stats-button addStatsButton" value="@stat.OutId">@stat.OutType</button>
                    }
                </td> 
                <td>@(scoring?.points ?? 0)</td> 
                <td>@(scoring?.points ?? 0)</td>
            </tr>
        }
    }
    else
    {
        <tr><td colspan="5">No data available</td></tr>
    }  *@
</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@defendingTeamId">@defendingTeamName</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>Defending</h3>
                </div>            
               <select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>

<input type="hidden" id="isAttacking" value="@Model.IsAttacking" />
            
                <ul id="playersList">
                @if (defendingTeamPlayers != null && defendingTeamPlayers.Any())
                {
                foreach (var player in defendingTeamPlayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
            <div class="in-bench">
                <h3>ON BENCH</h3>
                <ul>
                     @if (defendingBenchPlayers != null && defendingBenchPlayers.Any())
                {
                    foreach (var player in defendingBenchPlayers)
                    {
                        <li><button class="rstats-button" value="@player.playerid">@player.playername</button></li>
                    }
                }
                else
                {
                    <li>No players in play</li>
                }
                    </ul>
            </div>
    </div>

</div>

<script>



</script>

</body>
</html>
-----------scoring.cshtml-----------------
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    @* var runningTouchA=Model.InningBatchScoringsList?.FirstOrDefault()?.attackingPoints;
    var runningTouchD=Model.InningBatchScoringsList?.FirstOrDefault()?.defendingPoints;

    var runningTouchStatA=Model.InningBatchScoringsList?.FirstOrDefault()?.out_type_id;
    var runningTouchStatD=Model.InningBatchScoringsList?.FirstOrDefault()?.defendingPoints; *@


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="grid" id="inningDisplay">OutTime</span>
                </td>
                <td>
                     <select class="data-form batch-no-dropdown" id="dropdownBatch1" name="homeBatchNo[]" required>
                                <option value="" selected>Batch No</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <span class="grid" id="turnDisplay">batchplayer</span>
                </td>
                <td>
                     <select class="data-form batch-no-dropdown" id="dropdownBatch1" name="homeBatchNo[]" required>
                                <option value="" selected>Batch No</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <span class="grid" id="turnDisplay">OutTime</span>
                </td>
                <td>
                     <select class="data-form batch-no-dropdown" id="dropdownBatch1" name="homeBatchNo[]" required>
                                <option value="" selected>Batch No</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <span class="grid" id="turnDisplay">batchplayer</span>
                </td>
                <td>
                     <select class="data-form batch-no-dropdown" id="dropdownBatch1" name="homeBatchNo[]" required>
                                <option value="" selected>Batch No</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <span class="grid" id="turnDisplay">OutTime</span>
                </td>
                <td>
                    <select class="data-form batch-no-dropdown" id="dropdownBatch1" name="homeBatchNo[]" required>
                                <option value="" selected>Batch No</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <span class="grid" id="turnDisplay">batchplayer</span>
                </td>
                <td>
                     <select class="data-form batch-no-dropdown" id="dropdownBatch1" name="homeBatchNo[]" required>
                                <option value="" selected>Batch No</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="homescore">homescore</div>
<div class="awayscore">awayscore</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamname" />
    <input type="hidden" id="awayteam" value="@awayteamname" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home</th>
                <th></th>
                <th>Away</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" value="Score" disabled>Score</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" value="Undo">Undo</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>


@* <button onclick="swapPanels()"> SWap</button> *@

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@attackingTeamId">@attackingTeamName</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />

            <div class="in-play">
                <div class="container-undo">
                    <h3>Attacking</h3>
                </div>
                <ul id="inPlayList">
                    @if (attackingTeamPlayers!= null && attackingTeamPlayers.Any())
                    {
                        foreach (var player in attackingTeamPlayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>

            @* <div class="in-bench">
                <h3>ON BENCH</h3>
                <ul id="inBenchList">
                     @if (attackingBenchPlayers!= null && attackingBenchPlayers.Any())
                    {
                        foreach (var player in attackingBenchPlayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div> *@
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="8">Dream Run</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="">Swap</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="">Undo</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>


    
    @* @if (Model.HowOutList != null && Model.HowOutList.Any())
    {
        for (int i = 0; i < Math.Max(Model.HowOutList.Count(), Model.InningBatchScoringsList.Count()); i++)
        {
            var stat = i < Model.HowOutList.Count() ? Model.HowOutList[i] : null;
            var scoring = i < Model.InningBatchScoringsList.Count() ? Model.InningBatchScoringsList[i] : null;

            <tr>
                <td value="@stat.OutId">@(scoring?.points ?? 0)</td>
                <td value="@stat.OutId">@(scoring?.points ?? 0)</td> 
               
                <td>
                    @if (stat != null)
                    {
                        <button class="stats-button addStatsButton" value="@stat.OutId">@stat.OutType</button>
                    }
                </td> 
                <td>@(scoring?.points ?? 0)</td> 
                <td>@(scoring?.points ?? 0)</td>
            </tr>
        }
    }
    else
    {
        <tr><td colspan="5">No data available</td></tr>
    }  *@
</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@defendingTeamId">@defendingTeamName</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>Defending</h3>
                </div>            
               <select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>

<input type="hidden" id="isAttacking" value="@Model.IsAttacking" />
            
                <ul id="playersList">
                @if (defendingTeamPlayers != null && defendingTeamPlayers.Any())
                {
                foreach (var player in defendingTeamPlayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
            @* <div class="in-bench">
                <h3>ON BENCH</h3>
                <ul>
                     @if (defendingBenchPlayers != null && defendingBenchPlayers.Any())
                {
                    foreach (var player in defendingBenchPlayers)
                    {
                        <li><button class="rstats-button" value="@player.playerid">@player.playername</button></li>
                    }
                }
                else
                {
                    <li>No players in play</li>
                }
                    </ul>
            </div> *@
    </div>

</div>

<script>

///scoringUpdate
function updateScore(button) {
    const team = button.getAttribute("data-team"); // 'home' or 'away'
    const scoreChange = parseInt(button.getAttribute("data-score"), 10); // '+1', '-1', etc.
    const appMatchId = document.getElementById("matchId").value;
    const matchScoreId = document.getElementById("MatchScoreid").value;
    const tourId = document.getElementById("tourid").value;
    const tieId = "0"
    const homeTeam = document.getElementById("hometeam").value;
    const awayTeam = document.getElementById("awayteam").value;
    const winningTeam ="0";
    const isHomeTeamTrump = "0"; 
    const isAwayTeamTrump = "0";

    // Construct data object
    const data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
                alert(`Score updated to: ${data.gamescore}`);
            }
        })
        .catch(error => console.error("Error updating score:", error));
}




///timers
var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);

      // if (timerRunning) {
      //   alert('Please stop the timer before submitting stats!');
      //   return;
      // }

      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      const data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          // body: JSON.stringify(data)
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              // alert('Data added successfully!');
              console.error('Error saving stats:', result.message);
              location.reload();
          } 
          // else {
          //     alert('Error: ' + result.message);
          // }
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>
-----------------------------------js---------------------------------------

///filter player batchwise
// function fetchBatchPlayers() {
//   var urlParams = new URLSearchParams(window.location.search);
//   var tournamentId = urlParams.get('tournamentId');
//   var matchId = urlParams.get('MatchId');
//   var batchNo = document.getElementById('batchNoDropdown').value;
//   var isAttacking = document.getElementById('isAttacking').value;

//   console.log('Tournament ID:', tournamentId);
//   console.log('Match ID:', matchId);
//   console.log('Batch Number:', batchNo);
//   console.log('Is Attacking:', isAttacking);

//   fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&isAttacking=${isAttacking}&tournamentId=${tournamentId}&matchId=${matchId}`, {
//       method: 'GET'
//   })
//   .then(response => {
//       console.log('Response Status:', response.status); 
//       if (!response.ok) {
//           throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       return response.json();
//   })
//   .then(data => {
//     console.log('Fetched Data:', data);
//     const playersList = document.getElementById('playersList');
//     const turnDisplay = document.getElementById('turnDisplay'); // target the grid span
    
//     // Clear current grid data before adding new rows
//     const tableBody = document.querySelector('.grid-container tbody');
//     tableBody.innerHTML = '';

//     if (data.players && data.players.length > 0) {
//         console.log('Players found:', data.players);

//         data.players.forEach(player => {
//             // Create a new row in the table
//             const row = document.createElement('tr');

//             // Create table data for the Out Time, Attacker, Defender, and Stats
//             const outTimeCell = document.createElement('td');
//             outTimeCell.innerHTML = `<span class="grid" id="turnDisplay">${player.outTime || 'N/A'}</span>`;

//             const attackerCell = document.createElement('td');
//             attackerCell.innerHTML = `
//                 <select class="data-form" id="attackers" required>
//                     <option value="" selected>attackers</option>
//                     <option value="1">1</option>
//                     <option value="2">2</option>
//                     <option value="3">3</option>
//                     <option value="4">4</option>
//                 </select>
//             `;

//             const defenderCell = document.createElement('td');
//             defenderCell.innerHTML = `<span class="grid" id="turnDisplay">${player.playername}</span>`; // Show the player name as defender

//             const statsCell = document.createElement('td');
//             statsCell.innerHTML = `
//                  <select class="data-form" id="stats" required>
//                                 <option value="" selected>STATS</option>
//                                 <option value="1">RUNNING TOUCH</option>
//                                 <option value="4">POLE TOUCH</option>
//                                 <option value="6">SELF OUT</option>
//                                 <option value="2">POLE DIVE</option>
//                                 <option value="3">DIVE</option>
//                                 <option value="5">SKY DIVE</option>
//                             </select>
//             `;

//             // Append the new row to the table body
//             row.appendChild(outTimeCell);
//             row.appendChild(attackerCell);
//             row.appendChild(defenderCell);
//             row.appendChild(statsCell);
//             tableBody.appendChild(row);
//         });
//     } else {
//         console.log('No players in play');
//         tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
//     }
//   })
//   .catch(error => console.error('Error fetching players:', error));
// }



//first function for batchplayers
// function fetchBatchPlayers() {
//   var urlParams = new URLSearchParams(window.location.search);
//   var tournamentId = urlParams.get('tournamentId');
//   var matchId = urlParams.get('MatchId');
//   var batchNo = document.getElementById('batchNoDropdown').value;
//   var isAttacking = document.getElementById('isAttacking').value;

//   if (!matchId) {
//     console.error("Missing required parameters: matchId");
//     return;
// }

//     console.log('Tournament ID:', tournamentId);
//     console.log('Match ID:', matchId);
//     console.log('Batch Number:', batchNo);
//     console.log('Is Attacking:', isAttacking);

//   fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&isAttacking=${isAttacking}&tournamentId=${tournamentId}&matchId=${matchId}`, {
//       method: 'GET'
//   })

//   .then(response => {
//               console.log('Response Status:', response.status); 
//       if (!response.ok) {
//           throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       return response.json();
//   })
//   .then(data => {
//     console.log('Fetched Data:', data);
//       const playersList = document.getElementById('playersList');
//       playersList.innerHTML = '';
//       if (data.players && data.players.length > 0) {
//         console.log('Players found:', data.players);
//           data.players.forEach(player => {
//               const li = document.createElement('li');
//               li.innerHTML = `<button class="lstats-button">${player.playername}</button>`;
//               playersList.appendChild(li);
//           });
//       } else {
//         console.log('No players in play');
//           playersList.innerHTML = '<li>No players in play</li>';
//       }
//   })
//   .catch(error => console.error('Error fetching players:', error));
// }


---------------------------9jan------------------
[HttpGet]
public async Task<IActionResult> FilterPlayersByBatch(string batchNo, string tournamentId, string MatchId, int isAttacking)
{
    try
    {
        _logger.LogInformation($"Received parameters in batch dropdown- batchNo: {batchNo}, isAttacking: {isAttacking}, tournamentId: {tournamentId}, matchId: {MatchId}");
        var filteredPlayers = await _context.dataEnterPlayerDetailsScoring
            .Where(p => p.batchno == batchNo 
                        && p.idTournament == tournamentId 
                        && p.idMatch == MatchId 
                        && p.IsAttacking == isAttacking 
                        && p.playerstatus.Trim() == "InPlay")
            .ToListAsync();

                    _logger.LogInformation($"Filtered players: {filteredPlayers.Count}");


        return Json(new { players = filteredPlayers });
    }
    catch (Exception ex)
    {
        _logger.LogError($"Error fetching players by batch: {ex.Message}");
        return StatusCode(500, "Internal server error");
    }
}


//filter for grid
let attackerDropdownData = {};
function fetchBatchPlayers() {
  var urlParams = new URLSearchParams(window.location.search);
  var tournamentId = urlParams.get('tournamentId');
  var matchId = urlParams.get('MatchId');
  var batchNo = document.getElementById('batchNoDropdown').value;
  var isAttacking = document.getElementById('isAttacking').value;

  console.log('Tournament ID:', tournamentId);
  console.log('Match ID:', matchId);
  console.log('Batch Number:', batchNo);
  console.log('Is Attacking:', isAttacking);

  fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&isAttacking=${isAttacking}&tournamentId=${tournamentId}&matchId=${matchId}`, {
      method: 'GET'
  })
  .then(response => {
      console.log('Response Status:', response.status);
      if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
  })
  .then(data => {
    console.log('Fetched Data:', data);

    const attackingPlayerButtons = document.querySelectorAll('#inPlayList button');
    const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
        id: button.value,
        name: button.textContent.trim()
    }));

    const tableBody = document.querySelector('.grid-container tbody');
    tableBody.innerHTML = ''; 
    if (data.players && data.players.length > 0) {
        console.log('Players found:', data.players);

        data.players.forEach(player => {
            const row = document.createElement('tr');

            const outTimeCell = document.createElement('td');
            outTimeCell.innerHTML = `<span class="grid">${player.outTime || 'N/A'}</span>`;

            const attackerCell = document.createElement('td');
            const attackerDropdown = document.createElement('select');
            attackerDropdown.className = 'data-form';
            attackerDropdown.required = true;
            attackerDropdown.dataset.playerId = player.playerid; 
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.selected = true;
            defaultOption.textContent = 'attackers';
            attackerDropdown.appendChild(defaultOption);

            attackingPlayers.forEach(attacker => {
                const option = document.createElement('option');
                option.value = attacker.id;
                option.textContent = attacker.name;
                attackerDropdown.appendChild(option);
            });

            if (attackerDropdownData[player.playerid]) {
                attackerDropdown.value = attackerDropdownData[player.playerid];
            }

            attackerDropdown.addEventListener('change', (event) => {
                attackerDropdownData[player.playerid] = event.target.value;
            });

            attackerCell.appendChild(attackerDropdown);

            const defenderCell = document.createElement('td');
            defenderCell.innerHTML = `<span class="grid">${player.playername}</span>`;

            const statsCell = document.createElement('td');
            statsCell.innerHTML = `
                <select class="data-form" required>
                    <option value="" selected>STATS</option>
                    <option value="1">RUNNING TOUCH</option>
                    <option value="4">POLE TOUCH</option>
                    <option value="6">SELF OUT</option>
                    <option value="2">POLE DIVE</option>
                    <option value="3">DIVE</option>
                    <option value="5">SKY DIVE</option>
                </select>
            `;

            row.appendChild(outTimeCell);
            row.appendChild(attackerCell);
            row.appendChild(defenderCell);
            row.appendChild(statsCell);

            tableBody.appendChild(row);
        });
    } else {
        console.log('No players in play');
        tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
    }
  })
  .catch(error => console.error('Error fetching players:', error));
}


------------------------------------------------------js-------------------
function fetchBatchPlayers() {
    var urlParams = new URLSearchParams(window.location.search);
    const matchId = document.getElementById('MatchId').value;
    const batchNo = document.getElementById('batchNoDropdown').value;
    var tournamentId = urlParams.get('tournamentId');
    const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); // 1 if home team is attacking, 0 if defending
    const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); // 1 if away team is attacking, 0 if defending
  
    console.log('Match ID:', matchId);
    console.log('Batch Number:', batchNo);
    console.log('Is Home Team Attacking:', isHomeAttacking);
    console.log('Is Away Team Attacking:', isAwayAttacking);
    console.log('Tournament ID:', tournamentId);
  
    // Determine the attacking and defending teams
    const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
    const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';
  
    fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
      method: 'GET'
    })
      .then(response => {
        console.log('Response Status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Fetched Data:', data);
  
        // Fetch players from attacking and defending lists
        const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
        const defendingPlayerButtons = document.querySelectorAll(`${defendingList} button`);
  
        const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
        const defendingPlayers = Array.from(defendingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
        const tableBody = document.querySelector('.grid-container tbody');
        tableBody.innerHTML = ''; // Clear the table before inserting rows
  
        if (data.players && data.players.length > 0) {
          console.log('Players found:', data.players);
  
          data.players.forEach(player => {
            const row = document.createElement('tr');
  
            // Out Time Cell
            const outTimeCell = document.createElement('td');
            outTimeCell.innerHTML = `<span class="grid">${player.outTime || 'N/A'}</span>`;
  
            // Attacking Player Dropdown
            const attackerCell = document.createElement('td');
            const attackerDropdown = document.createElement('select');
            attackerDropdown.className = 'data-form';
            attackerDropdown.required = true;
  
            const defaultAttackingOption = document.createElement('option');
            defaultAttackingOption.value = '';
            defaultAttackingOption.selected = true;
            defaultAttackingOption.textContent = 'Select Attacker';
            attackerDropdown.appendChild(defaultAttackingOption);
  
            attackingPlayers.forEach(attacker => {
              const option = document.createElement('option');
              option.value = attacker.id;
              option.textContent = attacker.name;
              attackerDropdown.appendChild(option);
            });
  
            attackerDropdown.dataset.playerId = player.playerid;
            attackerCell.appendChild(attackerDropdown);
  
            // Defending Player Dropdown
            const defenderCell = document.createElement('td');
            const defenderDropdown = document.createElement('select');
            defenderDropdown.className = 'data-form';
            defenderDropdown.required = true;
  
            const defaultDefendingOption = document.createElement('option');
            defaultDefendingOption.value = '';
            defaultDefendingOption.selected = true;
            defaultDefendingOption.textContent = 'Select Defender';
            defenderDropdown.appendChild(defaultDefendingOption);
  
            defendingPlayers.forEach(defender => {
              const option = document.createElement('option');
              option.value = defender.id;
              option.textContent = defender.name;
              defenderDropdown.appendChild(option);
            });
  
            defenderDropdown.dataset.playerId = player.playerid;
            defenderCell.appendChild(defenderDropdown);
  
            // Stats Cell
            const statsCell = document.createElement('td');
            statsCell.innerHTML = `
              <select class="data-form" required>
                <option value="" selected>STATS</option>
                <option value="1">RUNNING TOUCH</option>
                <option value="4">POLE TOUCH</option>
                <option value="6">SELF OUT</option>
                <option value="2">POLE DIVE</option>
                <option value="3">DIVE</option>
                <option value="5">SKY DIVE</option>
              </select>
            `;
  
            // Append all cells to the row
            row.appendChild(outTimeCell);
            row.appendChild(attackerCell);
            row.appendChild(defenderCell);
            row.appendChild(statsCell);
  
            // Append the row to the table body
            tableBody.appendChild(row);
          });
        } else {
          console.log('No players in play');
          tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
        }
      })
      .catch(error => console.error('Error fetching players:', error));
  }
  

  -----------js-----------------------
  function fetchBatchPlayers() {
    var urlParams = new URLSearchParams(window.location.search);
    const matchId = document.getElementById('MatchId').value;
    const batchNo = document.getElementById('batchNoDropdown').value;
    var tournamentId = urlParams.get('tournamentId');
    const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); // 1 if home team is attacking, 0 if defending
    const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); // 1 if away team is attacking, 0 if defending
  
    console.log('Match ID:', matchId);
    console.log('Batch Number:', batchNo);
    console.log('Is Home Team Attacking:', isHomeAttacking);
    console.log('Is Away Team Attacking:', isAwayAttacking);
    console.log('Tournament ID:', tournamentId);
  
    // Determine the attacking and defending teams
    const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
    const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';
  
    fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
      method: 'GET'
    })
      .then(response => {
        console.log('Response Status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Fetched Data:', data);
  
        // Fetch players from attacking and defending lists
        const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
        const defendingPlayerButtons = document.querySelectorAll(`${defendingList} button`);
  
        const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
        const defendingPlayers = Array.from(defendingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
        const tableBody = document.querySelector('.grid-container tbody');
        tableBody.innerHTML = ''; // Clear the table before inserting rows
  
        if (data.players && data.players.length > 0) {
          console.log('Players found:', data.players);
  
          data.players.forEach(player => {
            const row = document.createElement('tr');
  
            // Out Time Cell
            const outTimeCell = document.createElement('td');
            outTimeCell.innerHTML = `<span class="grid">${player.outTime || 'N/A'}</span>`;
  
            // Attacking Player Dropdown
            const attackerCell = document.createElement('td');
            const attackerDropdown = document.createElement('select');
            attackerDropdown.className = 'data-form';
            attackerDropdown.required = true;
  
            const defaultAttackingOption = document.createElement('option');
            defaultAttackingOption.value = '';
            defaultAttackingOption.selected = true;
            defaultAttackingOption.textContent = 'Select Attacker';
            attackerDropdown.appendChild(defaultAttackingOption);
  
            attackingPlayers.forEach(attacker => {
              const option = document.createElement('option');
              option.value = attacker.id;
              option.textContent = attacker.name;
              attackerDropdown.appendChild(option);
            });
  
            attackerDropdown.dataset.playerId = player.playerid;
            attackerCell.appendChild(attackerDropdown);
  
            // Defending Player Dropdown
            const defenderCell = document.createElement('td');
            const defenderButton = document.createElement('button');
            defenderButton.className = 'grid';
            defenderButton.textContent = player.playername;
            //defenderDropdown.required = true;
  
            // const defaultDefendingOption = document.createElement('option');
            // defaultDefendingOption.value = '';
            // defaultDefendingOption.selected = true;
            // defaultDefendingOption.textContent = 'Select Defender';
            // defenderDropdown.appendChild(defaultDefendingOption);
  
            // defendingPlayers.forEach(defender => {
            //   const option = document.createElement('option');
            //   option.value = defender.id;
            //   option.textContent = defender.name;
            //   defenderDropdown.appendChild(option);
            // });
  
            defenderButton.dataset.playerId = player.playerid;
            defenderCell.appendChild(defenderButton);
  
            // Stats Cell
            const statsCell = document.createElement('td');
            statsCell.innerHTML = `
              <select class="data-form" required>
                <option value="" selected>STATS</option>
                <option value="1">RUNNING TOUCH</option>
                <option value="4">POLE TOUCH</option>
                <option value="6">SELF OUT</option>
                <option value="2">POLE DIVE</option>
                <option value="3">DIVE</option>
                <option value="5">SKY DIVE</option>
              </select>
            `;
  
            // Append all cells to the row
            row.appendChild(outTimeCell);
            row.appendChild(attackerCell);
            row.appendChild(defenderCell);
            row.appendChild(statsCell);
  
            // Append the row to the table body
            tableBody.appendChild(row);
  
  
  /////local storage bind
            attackerDropdown.addEventListener('change', () => {
              console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
              localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
            });
  
            defenderButton.addEventListener('click', () => {
              console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.dataset.playerId}`);
              localStorage.setItem(`defender_${player.playerid}`, defenderButton.dataset.playerId);
            });
        
  
          });
        } else {
          console.log('No players in play');
          tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
        }
      })
      .catch(error => console.error('Error fetching players:', error));
  }



  ----------------js-----------------------
  
// function fetchBatchPlayers() {
//   var urlParams = new URLSearchParams(window.location.search);
//   const matchId = document.getElementById('MatchId').value;
//   const batchNo = document.getElementById('batchNoDropdown').value;
//   var tournamentId = urlParams.get('tournamentId');
//   const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); // 1 if home team is attacking, 0 if defending
//   const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); // 1 if away team is attacking, 0 if defending

//   console.log('Match ID:', matchId);
//   console.log('Batch Number:', batchNo);
//   console.log('Is Home Team Attacking:', isHomeAttacking);
//   console.log('Is Away Team Attacking:', isAwayAttacking);
//   console.log('Tournament ID:', tournamentId);

//   // Determine the attacking and defending teams
//   const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
//   const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

//   fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
//     method: 'GET'
//   })
//     .then(response => {
//       console.log('Response Status:', response.status);
//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       return response.json();
//     })
//     .then(data => {
//       console.log('Fetched Data:', data);

//       // Fetch players from attacking and defending lists
//       const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
//       const defendingPlayerButtons = document.querySelectorAll(`${defendingList} button`);

//       const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
//         id: button.value,
//         name: button.textContent.trim()
//       }));

//       const defendingPlayers = Array.from(defendingPlayerButtons).map(button => ({
//         id: button.value,
//         name: button.textContent.trim()
//       }));

//       const tableBody = document.querySelector('.grid-container tbody');
//       tableBody.innerHTML = ''; // Clear the table before inserting rows

//       if (data.players && data.players.length > 0) {
//         console.log('Players found:', data.players);

//         data.players.forEach(player => {
//           const row = document.createElement('tr');

//           // Out Time Cell
//           const outTimeCell = document.createElement('td');
//           outTimeCell.innerHTML = `<span class="grid">${player.outTime || 'N/A'}</span>`;

//           // Attacking Player Dropdown
//           const attackerCell = document.createElement('td');
//           const attackerDropdown = document.createElement('select');
//           attackerDropdown.className = 'data-form';
//           attackerDropdown.required = true;

//           const defaultAttackingOption = document.createElement('option');
//           defaultAttackingOption.value = '';
//           defaultAttackingOption.selected = true;
//           defaultAttackingOption.textContent = 'Select Attacker';
//           attackerDropdown.appendChild(defaultAttackingOption);

//           attackingPlayers.forEach(attacker => {
//             const option = document.createElement('option');
//             option.value = attacker.id;
//             option.textContent = attacker.name;
//             attackerDropdown.appendChild(option);
//           });

//           // Restore attacker selection from localStorage if available
//           const selectedAttackerId = localStorage.getItem(`attacker_${player.playerId}`);
//           if (selectedAttackerId) {
//             console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
//             attackerDropdown.value = selectedAttackerId;
//           }

//           attackerDropdown.dataset.playerId = player.playerid;
//           attackerCell.appendChild(attackerDropdown);

//           // Defending Player Button (No Dropdown)
//           const defenderCell = document.createElement('td');
//           const defenderButton = document.createElement('button');
//           defenderButton.className = 'grid';
//           defenderButton.textContent = player.playername;

//           // Restore defender selection from localStorage if available
//           const selectedDefenderId = localStorage.getItem(`defender_${player.playername}`);
//           if (selectedDefenderId) {
//             console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderId}`);
//             defenderButton.dataset.playerId = selectedDefenderId;
//             defenderButton.textContent = `${selectedDefenderId}`;  // Example of showing selected ID
//           }

//           defenderCell.appendChild(defenderButton);

//           // Stats Cell
//           const statsCell = document.createElement('td');
//           statsCell.innerHTML = ` 
//             <select class="data-form" required>
//               <option value="" selected>STATS</option>
//               <option value="1">RUNNING TOUCH</option>
//               <option value="4">POLE TOUCH</option>
//               <option value="6">SELF OUT</option>
//               <option value="2">POLE DIVE</option>
//               <option value="3">DIVE</option>
//               <option value="5">SKY DIVE</option>
//             </select>
//           `;

//           // Append all cells to the row
//           row.appendChild(outTimeCell);
//           row.appendChild(attackerCell);
//           row.appendChild(defenderCell);
//           row.appendChild(statsCell);

//           // Append the row to the table body
//           tableBody.appendChild(row);

//           // Save the selected attacker and defender when changed
//           attackerDropdown.addEventListener('change', () => {
//             console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
//             localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
//           });

//           defenderButton.addEventListener('click', () => {
//             console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.dataset.playerId}`);
//             localStorage.setItem(`defender_${player.playerid}`, defenderButton.dataset.playerId);
//           });
//         });
//       } else {
//         console.log('No players in play');
//         tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
//       }
//     })
//     .catch(error => console.error('Error fetching players:', error));
// }


-------------------------------js------------------
// function fetchBatchPlayers() {
//   var urlParams = new URLSearchParams(window.location.search);
//   const matchId = document.getElementById('MatchId').value;
//   const batchNo = document.getElementById('batchNoDropdown').value;
//   var tournamentId = urlParams.get('tournamentId');
//   const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); // 1 if home team is attacking, 0 if defending
//   const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); // 1 if away team is attacking, 0 if defending

//   console.log('Match ID:', matchId);
//   console.log('Batch Number:', batchNo);
//   console.log('Is Home Team Attacking:', isHomeAttacking);
//   console.log('Is Away Team Attacking:', isAwayAttacking);
//   console.log('Tournament ID:', tournamentId);

//   // Determine the attacking and defending teams
//   const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
//   const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

//   fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
//     method: 'GET'
//   })
//     .then(response => {
//       console.log('Response Status:', response.status);
//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       return response.json();
//     })
//     .then(data => {
//       console.log('Fetched Data:', data);

//       // Fetch players from attacking and defending lists
//       const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
//       const defendingPlayerButtons = document.querySelectorAll(`${defendingList} button`);

//       const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
//         id: button.value,
//         name: button.textContent.trim()
//       }));

//       const defendingPlayers = Array.from(defendingPlayerButtons).map(button => ({
//         id: button.value,
//         name: button.textContent.trim()
//       }));

//       const tableBody = document.querySelector('.grid-container tbody');
//       tableBody.innerHTML = ''; // Clear the table before inserting rows

//       if (data.players && data.players.length > 0) {
//         console.log('Players found:', data.players);

//         data.players.forEach(player => {
//           const row = document.createElement('tr');

//           // Out Time Cell
//           const outTimeCell = document.createElement('td');
//           outTimeCell.innerHTML = `<span class="grid">${player.outTime || 'N/A'}</span>`;

//           // Attacking Player Dropdown
//           const attackerCell = document.createElement('td');
//           const attackerDropdown = document.createElement('select');
//           attackerDropdown.className = 'data-form';
//           attackerDropdown.required = true;

//           const defaultAttackingOption = document.createElement('option');
//           defaultAttackingOption.value = '';
//           defaultAttackingOption.selected = true;
//           defaultAttackingOption.textContent = 'Select Attacker';
//           attackerDropdown.appendChild(defaultAttackingOption);

//           attackingPlayers.forEach(attacker => {
//             const option = document.createElement('option');
//             option.value = attacker.id;
//             option.textContent = attacker.name;
//             attackerDropdown.appendChild(option);
//           });

//           attackerDropdown.dataset.playerId = player.playerid;
//           attackerCell.appendChild(attackerDropdown);

//           // Defending Player Dropdown
//           const defenderCell = document.createElement('td');
//           const defenderButton = document.createElement('button');
//           defenderButton.className = 'grid';
//           defenderButton.textContent = player.playername;
//           //defenderDropdown.required = true;

//           // const defaultDefendingOption = document.createElement('option');
//           // defaultDefendingOption.value = '';
//           // defaultDefendingOption.selected = true;
//           // defaultDefendingOption.textContent = 'Select Defender';
//           // defenderDropdown.appendChild(defaultDefendingOption);

//           // defendingPlayers.forEach(defender => {
//           //   const option = document.createElement('option');
//           //   option.value = defender.id;
//           //   option.textContent = defender.name;
//           //   defenderDropdown.appendChild(option);
//           // });

//           defenderButton.dataset.playerId = player.playerid;
//           defenderCell.appendChild(defenderButton);

//           // Stats Cell
//           const statsCell = document.createElement('td');
//           statsCell.innerHTML = `
//             <select class="data-form" required>
//               <option value="" selected>STATS</option>
//               <option value="1">RUNNING TOUCH</option>
//               <option value="4">POLE TOUCH</option>
//               <option value="6">SELF OUT</option>
//               <option value="2">POLE DIVE</option>
//               <option value="3">DIVE</option>
//               <option value="5">SKY DIVE</option>
//             </select>
//           `;

//           // Append all cells to the row
//           row.appendChild(outTimeCell);
//           row.appendChild(attackerCell);
//           row.appendChild(defenderCell);
//           row.appendChild(statsCell);

//           // Append the row to the table body
//           tableBody.appendChild(row);


// /////local storage bind
//           attackerDropdown.addEventListener('change', () => {
//             console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
//             localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
//           });

//           defenderButton.addEventListener('click', () => {
//             console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.dataset.playerId}`);
//             localStorage.setItem(`defender_${player.playerid}`, defenderButton.dataset.playerId);
//           });
      

//         });
//       } else {
//         console.log('No players in play');
//         tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
//       }
//     })
//     .catch(error => console.error('Error fetching players:', error));
// }


//filter for grid
// let attackerDropdownData = {};
// function fetchBatchPlayers() {
//   var urlParams = new URLSearchParams(window.location.search);
//   var tournamentId = urlParams.get('tournamentId');
//   var matchId = urlParams.get('MatchId');
//   var batchNo = document.getElementById('batchNoDropdown').value;
//   var isAttacking = document.getElementById('isAttacking').value;

//   console.log('Tournament ID:', tournamentId);
//   console.log('Match ID:', matchId);
//   console.log('Batch Number:', batchNo);
//   console.log('Is Attacking:', isAttacking);

//   fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&isAttacking=${isAttacking}&tournamentId=${tournamentId}&matchId=${matchId}`, {
//       method: 'GET'
//   })
//   .then(response => {
//       console.log('Response Status:', response.status);
//       if (!response.ok) {
//           throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       return response.json();
//   })
//   .then(data => {
//     console.log('Fetched Data:', data);

//     const attackingPlayerButtons = document.querySelectorAll('#inPlayList button');
//     const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
//         id: button.value,
//         name: button.textContent.trim()
//     }));

//     const tableBody = document.querySelector('.grid-container tbody');
//     tableBody.innerHTML = ''; 
//     if (data.players && data.players.length > 0) {
//         console.log('Players found:', data.players);

//         data.players.forEach(player => {
//             const row = document.createElement('tr');

//             const outTimeCell = document.createElement('td');
//             outTimeCell.innerHTML = `<span class="grid">${player.outTime || 'N/A'}</span>`;

//             const attackerCell = document.createElement('td');
//             const attackerDropdown = document.createElement('select');
//             attackerDropdown.className = 'data-form';
//             attackerDropdown.required = true;

//             attackerDropdown.dataset.playerId = player.playerid; 

//             const defaultOption = document.createElement('option');
//             defaultOption.value = '';
//             defaultOption.selected = true;
//             defaultOption.textContent = 'attackers';
//             attackerDropdown.appendChild(defaultOption);

//             attackingPlayers.forEach(attacker => {
//                 const option = document.createElement('option');
//                 option.value = attacker.id;
//                 option.textContent = attacker.name;
//                 attackerDropdown.appendChild(option);
//             });

//             if (attackerDropdownData[player.playerid]) {
//                 attackerDropdown.value = attackerDropdownData[player.playerid];
//             }

//             attackerDropdown.addEventListener('change', (event) => {
//                 attackerDropdownData[player.playerid] = event.target.value;
//             });

//             attackerCell.appendChild(attackerDropdown);

            // const defenderCell = document.createElement('td');
            // defenderCell.innerHTML = `<span class="grid">${player.playername}</span>`;

//             const statsCell = document.createElement('td');
//             statsCell.innerHTML = `
//                 <select class="data-form" required>
//                     <option value="" selected>STATS</option>
//                     <option value="1">RUNNING TOUCH</option>
//                     <option value="4">POLE TOUCH</option>
//                     <option value="6">SELF OUT</option>
//                     <option value="2">POLE DIVE</option>
//                     <option value="3">DIVE</option>
//                     <option value="5">SKY DIVE</option>
//                 </select>
//             `;

//             row.appendChild(outTimeCell);
//             row.appendChild(attackerCell);
//             row.appendChild(defenderCell);
//             row.appendChild(statsCell);

//             tableBody.appendChild(row);
//         });
//     } else {
//         console.log('No players in play');
//         tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
//     }
//   })
//   .catch(error => console.error('Error fetching players:', error));
// }



--------------------------------------------cshtml---------------------------------
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="grid-time" id="inningDisplay">OutTime</span>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>    
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <span class="grid-time" id="turnDisplay">OutTime</span>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <span class="grid-time" id="turnDisplay">OutTime</span>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home - @homeScore </th>
                <th>Away - @awayScore</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>

</table>
    </div>

    <div class="right-panel">
       <h2 data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>

///scoringUpdate
function updateScore(button) {
    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
                location.reload();
            }
        })
        .catch(error => console.error("Error updating score:", error));
}




///timers

var inningTimer = null;
var turnTimer = null;
var inningTime = localStorage.getItem('inningTime') ? parseInt(localStorage.getItem('inningTime'), 10) : 7 * 60;
var turnTime = localStorage.getItem('turnTime') ? parseInt(localStorage.getItem('turnTime'), 10) : 0;
var timerRunning = localStorage.getItem('timerRunning') === 'true';

// Initialize display with saved values
updateInningDisplay(inningTime);
updateTurnDisplay(turnTime);

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
                localStorage.setItem('inningTime', inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
            localStorage.setItem('turnTime', turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
        localStorage.setItem('timerRunning', timerRunning);
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
        localStorage.setItem('timerRunning', timerRunning);
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;

    inningTime = 7 * 60;
    turnTime = 0;

    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    localStorage.setItem('inningTime', inningTime);
    localStorage.setItem('turnTime', turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
    localStorage.setItem('timerRunning', timerRunning);
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}

// Resume timers if they were running before reload
document.addEventListener('DOMContentLoaded', function() {
    if (timerRunning) {
        document.getElementById('startStopTimer').click(); // Start the timers
    }
});



@* var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
} *@


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>


---------------------------------------------------------------
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="grid-time" id="inningDisplay">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>    
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="turnDisplay">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="turnDisplay">OutTime</button>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home - @homeScore </th>
                <th>Away - @awayScore</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>

</table>
    </div>

    <div class="right-panel">
       <h2 data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>

///scoringUpdate
function updateScore(button) {
    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
                location.reload();
                
            }
        })
        .catch(error => console.error("Error updating score:", error));
}




///timers

var inningTimer = null;
var turnTimer = null;
var inningTime = localStorage.getItem('inningTime') ? parseInt(localStorage.getItem('inningTime'), 10) : 7 * 60;
var turnTime = localStorage.getItem('turnTime') ? parseInt(localStorage.getItem('turnTime'), 10) : 0;
var timerRunning = localStorage.getItem('timerRunning') === 'true';

// Initialize display with saved values
updateInningDisplay(inningTime);
updateTurnDisplay(turnTime);

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
                localStorage.setItem('inningTime', inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
            localStorage.setItem('turnTime', turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
        localStorage.setItem('timerRunning', timerRunning);
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
        localStorage.setItem('timerRunning', timerRunning);
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;

    inningTime = 7 * 60;
    turnTime = 0;

    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    localStorage.setItem('inningTime', inningTime);
    localStorage.setItem('turnTime', turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
    localStorage.setItem('timerRunning', timerRunning);
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}

// Resume timers if they were running before reload
document.addEventListener('DOMContentLoaded', function() {
    if (timerRunning) {
        document.getElementById('startStopTimer').click(); // Start the timers
    }
});



@* var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
} *@


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>
--------------------------------------------------------------------------------

<!-- Add the +1 button -->
<button class="score-button" data-team="home" data-score="1">+1</button>

<!-- Add the OutTime button -->
<button class="grid-time" id="outTimeButton">OutTime</button>


// Function to update the "OutTime" button with the captured turnTime
function captureBatchTime() {
    var minutes = Math.floor(inningTime / 60);
    var remainingSeconds = inningTime % 60;
    document.getElementById('outTimeButton').textContent = `OutTime: ${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

// Add event listener to the +1 score button
document.querySelector('.score-button').addEventListener('click', function() {
    captureBatchTime();
});

------------------------------------------------------------------------
//filter for batch
function fetchBatchPlayers() {
    var urlParams = new URLSearchParams(window.location.search);
    const matchId = document.getElementById('MatchId').value;
    const batchNo = document.getElementById('batchNoDropdown').value;
    var tournamentId = urlParams.get('tournamentId');
    const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
    const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 
  
    console.log('Match ID:', matchId);
    console.log('Batch Number:', batchNo);
    console.log('Is Home Team Attacking:', isHomeAttacking);
    console.log('Is Away Team Attacking:', isAwayAttacking);
    console.log('Tournament ID:', tournamentId);
  
    // Determine the attacking and defending teams
    const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
    const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';
  
    fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
      method: 'GET'
    })
      .then(response => {
        console.log('Response Status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Fetched Data:', data);
  
        // Fetch players from attacking and defending lists
        const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
        const defendingPlayerButtons = document.querySelectorAll(`${defendingList} button`);
  
        const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
        // const defendingPlayers = Array.from(defendingPlayerButtons).map(button => ({
        //   id: button.value,
        //   name: button.textContent.trim()
        // }));
  
        document.querySelector('.score-button').addEventListener('click', function () {
          // Capture the current inning time
          var minutes = Math.floor(inningTime / 60);
          var remainingSeconds = inningTime % 60;
          var capturedTime = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
  
  
        const tableBody = document.querySelector('.grid-container tbody');
        tableBody.innerHTML = ''; // Clear the table before inserting rows
  
        if (data.players && data.players.length > 0) {
          console.log('Players found:', data.players);
  
          data.players.forEach(player => {
            const row = document.createElement('tr');
  
            // Out Time Cell
            const outTimeCell = document.createElement('td');
            timeCell.textContent = capturedTime;
  
            // Attacking Player Dropdown
            const attackerCell = document.createElement('td');
            const attackerDropdown = document.createElement('select');
            attackerDropdown.className = 'data-form';
            attackerDropdown.required = true;
  
            const defaultAttackingOption = document.createElement('option');
            defaultAttackingOption.value = '';
            defaultAttackingOption.selected = true;
            defaultAttackingOption.textContent = 'Select Attacker';
            attackerDropdown.appendChild(defaultAttackingOption);
  
            attackingPlayers.forEach(attacker => {
              const option = document.createElement('option');
              option.value = attacker.id;
              option.textContent = attacker.name;
              attackerDropdown.appendChild(option);
            });
  
            // Restore attacker selection from localStorage if available
            const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
            if (selectedAttackerId) {
              console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
              attackerDropdown.value = selectedAttackerId;
            }
  
            attackerDropdown.dataset.playerId = player.playerid;
            attackerCell.appendChild(attackerDropdown);
  
            // Defending Player Button (No Dropdown)
            const defenderCell = document.createElement('td');
            const defenderButton = document.createElement('button');
            defenderButton.className = 'grid';
            defenderButton.textContent = player.playername;
  
            // Restore defender selection from localStorage if available
            const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
            if (selectedDefenderName) {
              console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
              defenderButton.textContent = selectedDefenderName;
            }
  
            defenderButton.dataset.playerId = player.playerid;
            defenderCell.appendChild(defenderButton);
  
             const statsCell = document.createElement('td');
             const statsDropdown = document.createElement('select');
             statsDropdown.className = 'data-stats';
             statsDropdown.id = 'stats';
             statsDropdown.required = true;
   
             const statsOptions = [
               { value: '', text: 'STATS' },
               { value: '1', text: 'RUNNING TOUCH' },
               { value: '4', text: 'POLE TOUCH' },
               { value: '6', text: 'SELF OUT' },
               { value: '2', text: 'POLE DIVE' },
               { value: '3', text: 'DIVE' },
               { value: '5', text: 'SKY DIVE' },
             ];
   
             statsOptions.forEach(optionData => {
               const option = document.createElement('option');
               option.value = optionData.value;
               option.textContent = optionData.text;
               statsDropdown.appendChild(option);
             });
   
             // Restore stats selection from localStorage
             const savedStats = localStorage.getItem(`stats_${player.playerid}`);
             if (savedStats) {
               console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
               statsDropdown.value = savedStats;
             }
  
             statsCell.appendChild(statsDropdown);
  
            // Append all cells to the row
            row.appendChild(outTimeCell);
            row.appendChild(attackerCell);
            row.appendChild(defenderCell);
            row.appendChild(statsCell);
  
            // Append the row to the table body
            tableBody.appendChild(row);
  
            // Save the selected attacker and defender when changed
            attackerDropdown.addEventListener('change', () => {
              console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
              localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
            });
  
            defenderButton.addEventListener('click', () => {
              console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
              localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
            });
  
            statsDropdown.addEventListener('change', () => {
              console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
              localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
            });
  
  
          });
        } else {
          console.log('No players in play');
          tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
        }
      })
      .catch(error => console.error('Error fetching players:', error));
  }



  -------------------------------------------------------------------------------------------------------------------------------
  var matchdrop=document.querySelector('#dropdown1');
  if(matchdrop){
    matchdrop.addEventListener('change', function () {
      var tournamentId = this.value;
      var matchDropdown2 = document.querySelector('#dropdown2');
  
      matchDropdown2.innerHTML=''
  
      fetch(`${window.location.origin}/GetMatches?tournamentId=${tournamentId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.length > 0) {
            data.forEach(match => {
              const option = document.createElement('option');
              // option.value=match.matchid;
              option.value=JSON.stringify({ matchid: match.matchid, MatchNo: match.id });
              option.textContent = `${match.id} - ${match.name}`;
              matchDropdown2.appendChild(option);
            });
          } else {
            const option = document.createElement('option');
            option.value = "";
            option.textContent = "No matches found";
            matchDropdown2.appendChild(option);
          }
        })
        .catch(err => {
          console.error('Error fetching matches:', err);
        });
    });
  }
  
  var confirmNavigateButton = document.querySelector('#confirmNavigatetodataEnter');
  if (confirmNavigateButton) {
    confirmNavigateButton.addEventListener('click', function () {
      var tournamentId = document.querySelector('#dropdown1').value;
      var matchElement = document.querySelector('#dropdown2');
      matchValue=matchElement.value;
      // var matchName = matchElement.options[matchElement.selectedIndex]?.text || ""; 
  
      var matchData;
      try {
        matchData = JSON.parse(matchValue);
      } catch (e) {
        console.error('Error parsing match value:', e);
        alert('Invalid match data. Please select again.');
        return;
      }
  
      var matchid = matchData.matchid;
      var MatchNo = matchData.MatchNo;
  
      if (!matchid || !MatchNo) {
        alert('Incomplete match data. Please select a valid match.');
        return;
      }
  
  
      if (!tournamentId || !matchid) {
        alert('Please select both a tournament and a match.');
        return;
      }
  
      var url = `/dataEnter?tournamentId=${encodeURIComponent(tournamentId)}&matchId=${encodeURIComponent(matchid)}&MatchNo=${encodeURIComponent(MatchNo)}`;
      window.location.href = url;
    });
  }
  
  
  
  document.addEventListener("DOMContentLoaded", function () {
      var updateButton = document.getElementById("save");
      if (updateButton) {
        updateButton.addEventListener("click", function () {
          const middleBox = document.querySelector(".middle-box");
          if (middleBox) {
            middleBox.style.display = "none";
          }
        });
      }
    });
  
  
  document.addEventListener("DOMContentLoaded", function () {
      var updateButton = document.getElementById("toggleButton");
      if (updateButton) {
        updateButton.addEventListener("click", function () {
          const middleBox = document.querySelector(".middle-box");
          if (middleBox) {
            middleBox.style.display = "flex";
          }
        });
      }
    });
  
    function validateForm() {
      // var teamselection=document.getElementById("");
      var homePlayerNames = document.getElementsByName("homePlayerName[]");
      var homeBatchNos = document.getElementsByName("homeBatchNo[]");
      var homePlayerStatuses = document.getElementsByName("homePlayerStatus[]");
  
      if (homePlayerNames.length !== homeBatchNos.length || homePlayerNames.length !== homePlayerStatuses.length) {
          alert("All home team lists must have the same number of elements.");
          return false;
      }
  
      return true;
  }
  
  document.querySelectorAll('.data-form').forEach(select => {
    select.addEventListener('change', function () {
        this.value = this.value.trim();
    });
  });
  
  //filter for batch
  function fetchBatchPlayers() {
    var urlParams = new URLSearchParams(window.location.search);
    const matchId = document.getElementById('MatchId').value;
    const batchNo = document.getElementById('batchNoDropdown').value;
    var tournamentId = urlParams.get('tournamentId');
    const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
    const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 
  
    console.log('Match ID:', matchId);
    console.log('Batch Number:', batchNo);
    console.log('Is Home Team Attacking:', isHomeAttacking);
    console.log('Is Away Team Attacking:', isAwayAttacking);
    console.log('Tournament ID:', tournamentId);
  
    // Determine the attacking and defending teams
    const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
    const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';
  
    fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
      method: 'GET'
    })
      .then(response => {
        console.log('Response Status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Fetched Data:', data);
  
        const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
  
        const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
  
        const tableBody = document.querySelector('.grid-container tbody');
        tableBody.innerHTML = ''; 
  
        if (data.players && data.players.length > 0) {
          console.log('Players found:', data.players);
  
          data.players.forEach(player => {
            const row = document.createElement('tr');
  
          // var capturedTime = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
  
            // Out Time Cell
            const outTimeCell = document.createElement('td');
            outTimeCell.innerHTML = `<button class="grid-time" id="outTimeButton"></button>`;
  
            // Attacking Player Dropdown
            const attackerCell = document.createElement('td');
            const attackerDropdown = document.createElement('select');
            attackerDropdown.className = 'data-form';
            attackerDropdown.required = true;
  
            const defaultAttackingOption = document.createElement('option');
            defaultAttackingOption.value = '';
            defaultAttackingOption.selected = true;
            defaultAttackingOption.textContent = 'Select Attacker';
            attackerDropdown.appendChild(defaultAttackingOption);
  
            attackingPlayers.forEach(attacker => {
              const option = document.createElement('option');
              option.value = attacker.id;
              option.textContent = attacker.name;
              attackerDropdown.appendChild(option);
            });
  
            // Restore attacker selection from localStorage if available
            const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
            if (selectedAttackerId) {
              console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
              attackerDropdown.value = selectedAttackerId;
            }
  
            attackerDropdown.dataset.playerId = player.playerid;
            attackerCell.appendChild(attackerDropdown);
  
            // Defending Player Button (No Dropdown)
            const defenderCell = document.createElement('td');
            const defenderButton = document.createElement('button');
            defenderButton.className = 'grid';
            defenderButton.textContent = player.playername;
  
            // Restore defender selection from localStorage if available
            const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
            if (selectedDefenderName) {
              console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
              defenderButton.textContent = selectedDefenderName;
            }
  
            defenderButton.dataset.playerId = player.playerid;
            defenderCell.appendChild(defenderButton);
  
             const statsCell = document.createElement('td');
             const statsDropdown = document.createElement('select');
             statsDropdown.className = 'data-stats';
             statsDropdown.id = 'stats';
             statsDropdown.required = true;
   
             const statsOptions = [
               { value: '', text: 'STATS' },
               { value: '1', text: 'RUNNING TOUCH' },
               { value: '4', text: 'POLE TOUCH' },
               { value: '6', text: 'SELF OUT' },
               { value: '2', text: 'POLE DIVE' },
               { value: '3', text: 'DIVE' },
               { value: '5', text: 'SKY DIVE' },
             ];
   
             statsOptions.forEach(optionData => {
               const option = document.createElement('option');
               option.value = optionData.value;
               option.textContent = optionData.text;
               statsDropdown.appendChild(option);
             });
   
             // Restore stats selection from localStorage
             const savedStats = localStorage.getItem(`stats_${player.playerid}`);
             if (savedStats) {
               console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
               statsDropdown.value = savedStats;
             }
  
             statsCell.appendChild(statsDropdown);
  
            // Append all cells to the row
            row.appendChild(outTimeCell);
            row.appendChild(attackerCell);
            row.appendChild(defenderCell);
            row.appendChild(statsCell);
  
            // Append the row to the table body
            tableBody.appendChild(row);
  
            // Save the selected attacker and defender when changed
            attackerDropdown.addEventListener('change', () => {
              console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
              localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
            });
  
            defenderButton.addEventListener('click', () => {
              console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
              localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
            });
  
            statsDropdown.addEventListener('change', () => {
              console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
              localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
            });
  
  
  
  
          });
        } else {
          console.log('No players in play');
          tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
        }
      })
      .catch(error => console.error('Error fetching players:', error));
  }
  
  
  function restoreBatchSelection() {
    const savedBatch = localStorage.getItem('batchNo');
    if (savedBatch) {
      const batchNoDropdown = document.getElementById('batchNoDropdown');
      batchNoDropdown.value = savedBatch;
      console.log('Restored batch number from localStorage:', savedBatch);
      fetchBatchPlayers();
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    // Restore batch selection from localStorage
    restoreBatchSelection();
  
    // Add event listener to save batch selection
    const batchNoDropdown = document.getElementById('batchNoDropdown');
    batchNoDropdown.addEventListener('change', () => {
      localStorage.setItem('batchNo', batchNoDropdown.value);
      console.log('Saved batch number to localStorage:', batchNoDropdown.value);
  
      fetchBatchPlayers();
    });
  });
  
    ////retaining data for inning and turn
    function saveDropdownValues() {
      var inningValue = document.getElementById("inndropdown").value;
      var turnValue = document.getElementById("turndropdown").value;
  
      localStorage.setItem("inning", inningValue);
      localStorage.setItem("turn", turnValue);
  }
  
  function loadDropdownValues() {
      var savedInning = localStorage.getItem("inning");
      var savedTurn = localStorage.getItem("turn");
  
      if (savedInning) {
          document.getElementById("inndropdown").value = savedInning;
      }
      if (savedTurn) {
          document.getElementById("turndropdown").value = savedTurn;
      }
  }
  
  document.getElementById("inndropdown").addEventListener("change", saveDropdownValues);
  document.getElementById("turndropdown").addEventListener("change", saveDropdownValues);
  
  window.addEventListener("load", loadDropdownValues);
  
  
  
  document.getElementById('clearStorageBtn').addEventListener('click', () => {
    localStorage.clear();  // Clears all data in localStorage
    console.log('Local storage cleared!');
    
    // Optionally, reset the batch dropdown to the default value
    const batchNoDropdown = document.getElementById('batchNoDropdown');
    batchNoDropdown.value = '';
    console.log('Batch dropdown reset to default value.');
    
    // Optionally, clear any UI elements related to saved selections
    const tableBody = document.querySelector('.grid-container tbody');
    tableBody.innerHTML = '';  // Clear the table data
  });
  
--------------midnight---------------------------------------
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton1">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>    
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton2">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton3">OutTime</button>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home - @homeScore </th>
                <th>Away - @awayScore</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>

</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>


///scoringUpdate
function updateScore(button) {
    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
                location.reload();

            }
        })
        .catch(error => console.error("Error updating score:", error));
}



///timers
var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              //location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>


----------------------------js-----------------------
var matchdrop=document.querySelector('#dropdown1');
if(matchdrop){
  matchdrop.addEventListener('change', function () {
    var tournamentId = this.value;
    var matchDropdown2 = document.querySelector('#dropdown2');

    matchDropdown2.innerHTML=''

    fetch(`${window.location.origin}/GetMatches?tournamentId=${tournamentId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.length > 0) {
          data.forEach(match => {
            const option = document.createElement('option');
            // option.value=match.matchid;
            option.value=JSON.stringify({ matchid: match.matchid, MatchNo: match.id });
            option.textContent = `${match.id} - ${match.name}`;
            matchDropdown2.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.value = "";
          option.textContent = "No matches found";
          matchDropdown2.appendChild(option);
        }
      })
      .catch(err => {
        console.error('Error fetching matches:', err);
      });
  });
}

var confirmNavigateButton = document.querySelector('#confirmNavigatetodataEnter');
if (confirmNavigateButton) {
  confirmNavigateButton.addEventListener('click', function () {
    var tournamentId = document.querySelector('#dropdown1').value;
    var matchElement = document.querySelector('#dropdown2');
    matchValue=matchElement.value;
    // var matchName = matchElement.options[matchElement.selectedIndex]?.text || ""; 

    var matchData;
    try {
      matchData = JSON.parse(matchValue);
    } catch (e) {
      console.error('Error parsing match value:', e);
      alert('Invalid match data. Please select again.');
      return;
    }

    var matchid = matchData.matchid;
    var MatchNo = matchData.MatchNo;

    if (!matchid || !MatchNo) {
      alert('Incomplete match data. Please select a valid match.');
      return;
    }


    if (!tournamentId || !matchid) {
      alert('Please select both a tournament and a match.');
      return;
    }

    var url = `/dataEnter?tournamentId=${encodeURIComponent(tournamentId)}&matchId=${encodeURIComponent(matchid)}&MatchNo=${encodeURIComponent(MatchNo)}`;
    window.location.href = url;
  });
}



document.addEventListener("DOMContentLoaded", function () {
    var updateButton = document.getElementById("save");
    if (updateButton) {
      updateButton.addEventListener("click", function () {
        const middleBox = document.querySelector(".middle-box");
        if (middleBox) {
          middleBox.style.display = "none";
        }
      });
    }
  });


document.addEventListener("DOMContentLoaded", function () {
    var updateButton = document.getElementById("toggleButton");
    if (updateButton) {
      updateButton.addEventListener("click", function () {
        const middleBox = document.querySelector(".middle-box");
        if (middleBox) {
          middleBox.style.display = "flex";
        }
      });
    }
  });

  function validateForm() {
    // var teamselection=document.getElementById("");
    var homePlayerNames = document.getElementsByName("homePlayerName[]");
    var homeBatchNos = document.getElementsByName("homeBatchNo[]");
    var homePlayerStatuses = document.getElementsByName("homePlayerStatus[]");

    if (homePlayerNames.length !== homeBatchNos.length || homePlayerNames.length !== homePlayerStatuses.length) {
        alert("All home team lists must have the same number of elements.");
        return false;
    }

    return true;
}

document.querySelectorAll('.data-form').forEach(select => {
  select.addEventListener('change', function () {
      this.value = this.value.trim();
  });
});

// // Function to dynamically update and capture batch time
function captureBatchTime() {
  const minutes = Math.floor(inningTime / 60);
  const remainingSeconds = inningTime % 60;

  const outTimeButton1 = document.getElementById('outTimeButton1');
  // const outTimeButton2 = document.getElementById('outTimeButton2');
  // const outTimeButton3 = document.getElementById('outTimeButton3');
  
    outTimeButton1.textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
    // outTimeButton2.textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
    // outTimeButton3.textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
  
}

// Function to handle button clicks
document.querySelector('.score-button').addEventListener('click', function () {
  captureBatchTime();
});

// Function to fetch players based on batch
function fetchBatchPlayers() {
  var urlParams = new URLSearchParams(window.location.search);
  const matchId = document.getElementById('MatchId').value;
  const batchNo = document.getElementById('batchNoDropdown').value;
  var tournamentId = urlParams.get('tournamentId');
  const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
  const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 

  console.log('Match ID:', matchId);
  console.log('Batch Number:', batchNo);
  console.log('Is Home Team Attacking:', isHomeAttacking);
  console.log('Is Away Team Attacking:', isAwayAttacking);
  console.log('Tournament ID:', tournamentId);

  // Determine the attacking and defending teams
  const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
  const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

  fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
    method: 'GET'
  })
    .then(response => {
      console.log('Response Status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Fetched Data:', data);

      const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);

      const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
        id: button.value,
        name: button.textContent.trim()
      }));


      const tableBody = document.querySelector('.grid-container tbody');
      tableBody.innerHTML = ''; 

      if (data.players && data.players.length > 0) {
        console.log('Players found:', data.players);

        data.players.forEach(player => {
          const row = document.createElement('tr');

          // Out Time Cell
          const outTimeCell = document.createElement('td');
          outTimeCell.innerHTML = `<button class="grid-time" id="outTimeButton1"></button>`;
          // outTimeCell.innerHTML = `<button class="grid-time" id="outTimeButton2"></button>`;
          // outTimeCell.innerHTML = `<button class="grid-time" id="outTimeButton3"></button>`;


          // Attacking Player Dropdown
          const attackerCell = document.createElement('td');
          const attackerDropdown = document.createElement('select');
          attackerDropdown.className = 'data-form';
          attackerDropdown.required = true;

          const defaultAttackingOption = document.createElement('option');
          defaultAttackingOption.value = '';
          defaultAttackingOption.selected = true;
          defaultAttackingOption.textContent = 'Select Attacker';
          attackerDropdown.appendChild(defaultAttackingOption);

          attackingPlayers.forEach(attacker => {
            const option = document.createElement('option');
            option.value = attacker.id;
            option.textContent = attacker.name;
            attackerDropdown.appendChild(option);
          });

          // Restore attacker selection from localStorage if available
          const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
          if (selectedAttackerId) {
            console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
            attackerDropdown.value = selectedAttackerId;
          }

          attackerDropdown.dataset.playerId = player.playerid;
          attackerCell.appendChild(attackerDropdown);

          // Defending Player Button (No Dropdown)
          const defenderCell = document.createElement('td');
          const defenderButton = document.createElement('button');
          defenderButton.className = 'grid';
          defenderButton.textContent = player.playername;

          // Restore defender selection from localStorage if available
          const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
          if (selectedDefenderName) {
            console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
            defenderButton.textContent = selectedDefenderName;
          }

          defenderButton.dataset.playerId = player.playerid;
          defenderCell.appendChild(defenderButton);

           const statsCell = document.createElement('td');
           const statsDropdown = document.createElement('select');
           statsDropdown.className = 'data-stats';
           statsDropdown.id = 'stats';
           statsDropdown.required = true;
 
           const statsOptions = [
             { value: '', text: 'STATS' },
             { value: '1', text: 'RUNNING TOUCH' },
             { value: '4', text: 'POLE TOUCH' },
             { value: '6', text: 'SELF OUT' },
             { value: '2', text: 'POLE DIVE' },
             { value: '3', text: 'DIVE' },
             { value: '5', text: 'SKY DIVE' },
           ];
 
           statsOptions.forEach(optionData => {
             const option = document.createElement('option');
             option.value = optionData.value;
             option.textContent = optionData.text;
             statsDropdown.appendChild(option);
           });
 
           // Restore stats selection from localStorage
           const savedStats = localStorage.getItem(`stats_${player.playerid}`);
           if (savedStats) {
             console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
             statsDropdown.value = savedStats;
           }

           statsCell.appendChild(statsDropdown);

          // Append all cells to the row
          row.appendChild(outTimeCell);
          row.appendChild(attackerCell);
          row.appendChild(defenderCell);
          row.appendChild(statsCell);

          // Append the row to the table body
          tableBody.appendChild(row);

          // Save the selected attacker and defender when changed
          attackerDropdown.addEventListener('change', () => {
            console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
            localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
          });

          defenderButton.addEventListener('click', () => {
            console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
            localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
          });

          statsDropdown.addEventListener('change', () => {
            console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
            localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
          });




        });
      } else {
        console.log('No players in play');
        tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
      }
    })
    .catch(error => console.error('Error fetching players:', error));
}

function restoreBatchSelection() {
  const savedBatch = localStorage.getItem('batchNo');
  if (savedBatch) {
    const batchNoDropdown = document.getElementById('batchNoDropdown');
    batchNoDropdown.value = savedBatch;
    console.log('Restored batch number from localStorage:', savedBatch);
    fetchBatchPlayers();
  }
}

document.addEventListener('DOMContentLoaded', () => {
  // Restore batch selection from localStorage
  restoreBatchSelection();

  // Add event listener to save batch selection
  const batchNoDropdown = document.getElementById('batchNoDropdown');
  batchNoDropdown.addEventListener('change', () => {
    localStorage.setItem('batchNo', batchNoDropdown.value);
    console.log('Saved batch number to localStorage:', batchNoDropdown.value);

    fetchBatchPlayers();
  });
});

  ////retaining data for inning and turn
  function saveDropdownValues() {
    var inningValue = document.getElementById("inndropdown").value;
    var turnValue = document.getElementById("turndropdown").value;

    localStorage.setItem("inning", inningValue);
    localStorage.setItem("turn", turnValue);
}

function loadDropdownValues() {
    var savedInning = localStorage.getItem("inning");
    var savedTurn = localStorage.getItem("turn");

    if (savedInning) {
        document.getElementById("inndropdown").value = savedInning;
    }
    if (savedTurn) {
        document.getElementById("turndropdown").value = savedTurn;
    }
}

document.getElementById("inndropdown").addEventListener("change", saveDropdownValues);
document.getElementById("turndropdown").addEventListener("change", saveDropdownValues);

window.addEventListener("load", loadDropdownValues);



document.getElementById('clearStorageBtn').addEventListener('click', () => {
  localStorage.clear();  // Clears all data in localStorage
  console.log('Local storage cleared!');
  
  // Optionally, reset the batch dropdown to the default value
  const batchNoDropdown = document.getElementById('batchNoDropdown');
  batchNoDropdown.value = '';
  console.log('Batch dropdown reset to default value.');
  
  // Optionally, clear any UI elements related to saved selections
  const tableBody = document.querySelector('.grid-container tbody');
  tableBody.innerHTML = '';  // Clear the table data
});


---------------scoring.cshtml--------------
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton1">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>    
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton2">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton3">OutTime</button>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home - @homeScore </th>
                <th>Away - @awayScore</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>

</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>


///scoringUpdate
function updateScore(button) {
    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
               // location.reload();

            }
        })
        .catch(error => console.error("Error updating score:", error));
}



///timers
var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              //location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton1">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>    
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton2">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton3">OutTime</button>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home - @homeScore </th>
                <th>Away - @awayScore</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>

</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>


///scoringUpdate
function updateScore(button) {
    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
               // location.reload();

            }
        })
        .catch(error => console.error("Error updating score:", error));
}



///timers
var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              //location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>
@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                    <button class="resetbtn" id="resetTimer">Reset</button>
                </td>
                
            </tr>
        </tbody>
    </table>
</div>

<div class="grid-container">
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton1">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>    
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton2">OutTime</button>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="grid-time" id="outTimeButton3">OutTime</button>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="4">POLE TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="3">DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    @* <input type="hidden" id="tieid" value="@tourid" /> *@
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    @* <input type="hidden" id="winningteam" value="@awayteamId" /> *@
    <table>
        <thead>
            <tr>
                <th>Home - @homeScore </th>
                <th>Away - @awayScore</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>

</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>


///scoringUpdate
function updateScore(button) {
    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
               // location.reload();

            }
        })
        .catch(error => console.error("Error updating score:", error));
}



///timers
var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              //location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>


-------------------------------------scoring--------------------------------------
function fetchBatchPlayers() {
  var urlParams = new URLSearchParams(window.location.search);
  const matchId = document.getElementById('MatchId').value;
  const batchNo = document.getElementById('batchNoDropdown').value;
  var tournamentId = urlParams.get('tournamentId');
  const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
  const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 

  console.log('Match ID:', matchId);
  console.log('Batch Number:', batchNo);
  console.log('Is Home Team Attacking:', isHomeAttacking);
  console.log('Is Away Team Attacking:', isAwayAttacking);
  console.log('Tournament ID:', tournamentId);

  // Determine the attacking and defending teams
  const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
  const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

  fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
    method: 'GET'
  })
    .then(response => {
      console.log('Response Status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Fetched Data:', data);

      const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);

      const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
        id: button.value,
        name: button.textContent.trim()
      }));


      const tableBody = document.querySelector('.grid-container tbody');
      tableBody.innerHTML = ''; 

      if (data.players && data.players.length > 0) {
        console.log('Players found:', data.players);

        data.players.forEach(player => {
          const row = document.createElement('tr');

          // Out Time Cell

          
          const saveCell = document.createElement('td');
          saveCell.innerHTML = `<button class="finalSave" id="fbtn">Save</button>`;

          // Attacking Player Dropdown
          const attackerCell = document.createElement('td');
          const attackerDropdown = document.createElement('select');
          attackerDropdown.className = 'data-form';
          attackerDropdown.required = true;

          const defaultAttackingOption = document.createElement('option');
          defaultAttackingOption.value = '';
          defaultAttackingOption.selected = true;
          defaultAttackingOption.textContent = 'Select Attacker';
          attackerDropdown.appendChild(defaultAttackingOption);

          attackingPlayers.forEach(attacker => {
            const option = document.createElement('option');
            option.value = attacker.id;
            option.textContent = attacker.name;
            attackerDropdown.appendChild(option);
          });

          // Restore attacker selection from localStorage if available
          const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
          if (selectedAttackerId) {
            console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
            attackerDropdown.value = selectedAttackerId;
          }

          attackerDropdown.dataset.playerId = player.playerid;
          attackerCell.appendChild(attackerDropdown);

          // Defending Player Button (No Dropdown)
          const defenderCell = document.createElement('td');
          const defenderButton = document.createElement('button');
          defenderButton.className = 'grid';
          defenderButton.textContent = player.playername;

          // Restore defender selection from localStorage if available
          const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
          if (selectedDefenderName) {
            console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
            defenderButton.textContent = selectedDefenderName;
          }

          defenderButton.dataset.playerId = player.playerid;
          defenderCell.appendChild(defenderButton);

           const statsCell = document.createElement('td');
           const statsDropdown = document.createElement('select');
           statsDropdown.className = 'data-stats';
           statsDropdown.id = 'stats';
           statsDropdown.required = true;
 
           const statsOptions = [
             { value: '', text: 'STATS' },
             { value: '1', text: 'RUNNING TOUCH' },
             { value: '4', text: 'POLE TOUCH' },
             { value: '6', text: 'SELF OUT' },
             { value: '2', text: 'POLE DIVE' },
             { value: '3', text: 'DIVE' },
             { value: '5', text: 'SKY DIVE' },
           ];
 
           statsOptions.forEach(optionData => {
             const option = document.createElement('option');
             option.value = optionData.value;
             option.textContent = optionData.text;
             statsDropdown.appendChild(option);
           });
 
           // Restore stats selection from localStorage
           const savedStats = localStorage.getItem(`stats_${player.playerid}`);
           if (savedStats) {
             console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
             statsDropdown.value = savedStats;
           }

           statsCell.appendChild(statsDropdown);

          // Append all cells to the row
          row.appendChild(attackerCell);
          row.appendChild(defenderCell);
          row.appendChild(statsCell);
          row.appendChild(saveCell);

          // Append the row to the table body
          tableBody.appendChild(row);

          // Save the selected attacker and defender when changed
          attackerDropdown.addEventListener('change', () => {
            console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
            localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
          });

          defenderButton.addEventListener('click', () => {
            console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
            localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
          });

          statsDropdown.addEventListener('change', () => {
            console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
            localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
          });




        });
      } else {
        console.log('No players in play');
        tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
      }
    })
    .catch(error => console.error('Error fetching players:', error));
}


-----------------------------------------------------------
function fetchBatchPlayers() {
  var urlParams = new URLSearchParams(window.location.search);
  const matchId = document.getElementById('MatchId').value;
  const batchNo = document.getElementById('batchNoDropdown').value;
  var tournamentId = urlParams.get('tournamentId');
  const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
  const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 

  console.log('Match ID:', matchId);
  console.log('Batch Number:', batchNo);
  console.log('Is Home Team Attacking:', isHomeAttacking);
  console.log('Is Away Team Attacking:', isAwayAttacking);
  console.log('Tournament ID:', tournamentId);

  const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
  const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

  fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
    method: 'GET'
  })
    .then(response => {
      console.log('Response Status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Fetched Data:', data);

      const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);

      const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
        id: button.value,
        name: button.textContent.trim()
      }));


      const tableBody = document.querySelector('.grid-container tbody');
      tableBody.innerHTML = ''; 

      if (data.players && data.players.length > 0) {
        console.log('Players found:', data.players);

        data.players.forEach(player => {
          const row = document.createElement('tr');

          // Out Time Cell
                const timeCell = document.createElement('td');
                const timeInput = document.createElement('input');
                timeInput.type = 'text'; 
                timeInput.id = `time_${player.playerid}`; 
                timeInput.name = 'fname';
                timeInput.value = '00'; 
                timeCell.appendChild(timeInput);

          const saveCell = document.createElement('td');
          saveCell.innerHTML = `<button class="finalSave" id="fbtn">Save</button>`;

          // Attacking Player Dropdown
          const attackerCell = document.createElement('td');
          const attackerDropdown = document.createElement('select');
          attackerDropdown.className = 'data-form';
          attackerDropdown.required = true;

          const defaultAttackingOption = document.createElement('option');
          defaultAttackingOption.value = '';
          defaultAttackingOption.selected = true;
          defaultAttackingOption.textContent = 'Select Attacker';
          attackerDropdown.appendChild(defaultAttackingOption);

          attackingPlayers.forEach(attacker => {
            const option = document.createElement('option');
            option.value = attacker.id;
            option.textContent = attacker.name;
            attackerDropdown.appendChild(option);
          });

          // Restore attacker selection from localStorage if available
          const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
          if (selectedAttackerId) {
            console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
            attackerDropdown.value = selectedAttackerId;
          }

          attackerDropdown.dataset.playerId = player.playerid;
          attackerCell.appendChild(attackerDropdown);

          // Defending Player Button (No Dropdown)
          const defenderCell = document.createElement('td');
          const defenderButton = document.createElement('button');
          defenderButton.className = 'grid';
          defenderButton.textContent = player.playername;

          // Restore defender selection from localStorage if available
          const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
          if (selectedDefenderName) {
            console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
            defenderButton.textContent = selectedDefenderName;
          }

          defenderButton.dataset.playerId = player.playerid;
          defenderCell.appendChild(defenderButton);

           const statsCell = document.createElement('td');
           const statsDropdown = document.createElement('select');
           statsDropdown.className = 'data-stats';
           statsDropdown.id = 'stats';
           statsDropdown.required = true;
 
           const statsOptions = [
             { value: '', text: 'STATS' },
             { value: '1', text: 'RUNNING TOUCH' },
             { value: '6', text: 'SELF OUT' },
             { value: '2', text: 'POLE DIVE' },
             { value: '5', text: 'SKY DIVE' },
           ];
 
           statsOptions.forEach(optionData => {
             const option = document.createElement('option');
             option.value = optionData.value;
             option.textContent = optionData.text;
             statsDropdown.appendChild(option);
           });
 
           // Restore stats selection from localStorage
           const savedStats = localStorage.getItem(`stats_${player.playerid}`);
           if (savedStats) {
             console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
             statsDropdown.value = savedStats;
           }

           statsCell.appendChild(statsDropdown);

          // Append all cells to the row
          row.appendChild(timeCell);
          row.appendChild(attackerCell);
          row.appendChild(defenderCell);
          row.appendChild(statsCell);
          row.appendChild(saveCell);

          // Append the row to the table body
          tableBody.appendChild(row);

          // Save the selected attacker and defender when changed
          attackerDropdown.addEventListener('change', () => {
            console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
            localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
          });

          defenderButton.addEventListener('click', () => {
            console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
            localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
          });

          statsDropdown.addEventListener('change', () => {
            console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
            localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
          });

        });
      } else {
        console.log('No players in play');
        tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
      }
    })
    .catch(error => console.error('Error fetching players:', error));
}


<div class="grid-container">
    <input type="hidden" id="tourid" value="@tourid" />
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    <input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
    <input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
  <table>
        <thead>
            <tr>
                <th>Out Time</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
                <th>Save</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <label for="fname">Time</label>
                    <input type="text" id="fname" name="fname"><br><br>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                 <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
                <td>
                    <button class="finalSave" id="fbtn">Save</button>
                </td>
            </tr>
            <tr>
                  <td>
                    <label for="fname">Time</label>
                    <input type="text" id="fname" name="fname"><br><br>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                 <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
                <td>
                    <button class="finalSave" id="fbtn">Save</button>
                </td>
            </tr>
            <tr>
                  <td>
                    <label for="fname">Time</label>
                    <input type="text" id="fname" name="fname"><br><br>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
                <td>
                    <button class="finalSave" id="fbtn">Save</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

in controllers
public List<TeamPlayer_CurrentMatch> teamPlayerCurrentMatches {get;set;}

table Entity
public class TeamPlayer_CurrentMatch
{
    public int Id { get; set; }
    public int SeriesId { get; set; }
    public int MatchId { get; set; }
    public int TeamId { get; set; }
    public bool ActiveWazir { get; set; }
    public int AttackingPoints { get; set; }
    public int BonusPoints { get; set; }
    public int DefendingPosition { get; set; }
    public int FoulCount { get; set; }
    public int PlayerId { get; set; }
    public bool IsAttacker { get; set; }
    public bool IsDefender { get; set; }
    public bool IsOnBench { get; set; }
    public bool IsOnCourt { get; set; }
    public bool IsRetired { get; set; }
    public bool IsStarter { get; set; }
    public bool IsSubstituted { get; set; }
    public bool IsWazir { get; set; }
    public int PoleDive { get; set; }
    public bool RedCard { get; set; }
    public int SelfOut { get; set; }
    public int SkyDive { get; set; }
    public int TechnicalPoints { get; set; }
    public int TimeSpend { get; set; }
    public int YellowCard { get; set; }
    public int YellowCardCount { get; set; }
    public string AppMatchId { get; set; }
    public int BatchNo { get; set; }
    public int DefenderOut { get; set; }
    public int DefenderNotOut { get; set; }
    public int DreamRunCompleted { get; set; }
    public bool IsCaptain { get; set; }
    public int IdPosition { get; set; }
    public string PositionName { get; set; }
}

-----------------------------------fetchbatchplayers-------------
function fetchBatchPlayers() {
  var urlParams = new URLSearchParams(window.location.search);
  const matchId = document.getElementById('MatchId').value;
  const batchNo = document.getElementById('batchNoDropdown').value;
  var tournamentId = urlParams.get('tournamentId');
  const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
  const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 

  console.log('Match ID:', matchId);
  console.log('Batch Number:', batchNo);
  console.log('Is Home Team Attacking:', isHomeAttacking);
  console.log('Is Away Team Attacking:', isAwayAttacking);
  console.log('Tournament ID:', tournamentId);

  const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
  const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

  fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
    method: 'GET'
  })
    .then(response => {
      console.log('Response Status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Fetched Data:', data);

      const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
      const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
        id: button.value,
        name: button.textContent.trim()
      }));

      const tableBody = document.querySelector('.grid-container tbody');
      tableBody.innerHTML = ''; 

      if (data.players && data.players.length > 0) {
        console.log('Players found:', data.players);

        data.players.forEach(player => {
          const row = document.createElement('tr');

          // Out Time Cell
          const timeCell = document.createElement('td');
          const timeInput = document.createElement('input');
          timeInput.type = 'text'; 
          timeInput.id = `time_${player.playerid}`; 
          timeInput.name = 'fname';
          timeInput.value = '00'; 
          timeCell.appendChild(timeInput);

          // Save Button Cell
          const saveCell = document.createElement('td');
          const saveButton = document.createElement('button');
          saveButton.className = 'finalSave';
          saveButton.id = `fbtn_${player.playerid}`; 
          saveButton.textContent = 'Save';
          saveCell.appendChild(saveButton);

          // Attacker Dropdown
          const attackerCell = document.createElement('td');
          const attackerDropdown = document.createElement('select');
          attackerDropdown.className = 'data-form';
          attackerDropdown.required = true;

          const defaultAttackingOption = document.createElement('option');
          defaultAttackingOption.value = '';
          defaultAttackingOption.selected = true;
          defaultAttackingOption.textContent = 'Select Attacker';
          attackerDropdown.appendChild(defaultAttackingOption);

          attackingPlayers.forEach(attacker => {
            const option = document.createElement('option');
            option.value = attacker.id;
            option.textContent = attacker.name;
            attackerDropdown.appendChild(option);
          });

          // Restore attacker selection from localStorage if available
          const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
          if (selectedAttackerId) {
            console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
            attackerDropdown.value = selectedAttackerId;
          }

          attackerDropdown.dataset.playerId = player.playerid;
          attackerCell.appendChild(attackerDropdown);

          // Defender Button
          const defenderCell = document.createElement('td');
          const defenderButton = document.createElement('button');
          defenderButton.className = 'grid';
          defenderButton.setAttribute('data-player-id', player.playerid);
          defenderButton.textContent = player.playername;
          defenderButton.value=player.playerid;

          // Restore defender selection from localStorage if available
          const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
          if (selectedDefenderName) {
            console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
            defenderButton.textContent = selectedDefenderName;
          }

          defenderButton.dataset.playerId = player.playerid;
          defenderCell.appendChild(defenderButton);

          // Stats Dropdown
          const statsCell = document.createElement('td');
          const statsDropdown = document.createElement('select');
          statsDropdown.className = 'data-stats';
          statsDropdown.required = true;

          const statsOptions = [
            { value: '', text: 'STATS' },
            { value: '1', text: 'RUNNING TOUCH' },
            { value: '6', text: 'SELF OUT' },
            { value: '2', text: 'POLE DIVE' },
            { value: '5', text: 'SKY DIVE' },
          ];

          statsOptions.forEach(optionData => {
            const option = document.createElement('option');
            option.value = optionData.value;
            option.textContent = optionData.text;
            statsDropdown.appendChild(option);
          });

          // Restore stats selection from localStorage
          const savedStats = localStorage.getItem(`stats_${player.playerid}`);
          if (savedStats) {
            console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
            statsDropdown.value = savedStats;
          }

          statsCell.appendChild(statsDropdown);

          // Append all cells to the row
          row.appendChild(timeCell);
          row.appendChild(attackerCell);
          row.appendChild(defenderCell);
          row.appendChild(statsCell);
          row.appendChild(saveCell);

          // Append the row to the table body
          tableBody.appendChild(row);

          // Event Listeners to save data
          attackerDropdown.addEventListener('change', () => {
            console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
            localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
          });

          defenderButton.addEventListener('click', () => {
            console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
            localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
          });

          statsDropdown.addEventListener('change', () => {
            console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
            localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
          });

          // Save button click event
          saveButton.addEventListener('click', () => {
            const time = document.getElementById(`time_${player.playerid}`).value.trim();
            const attacker = attackerDropdown.value.trim();
            const defender = defenderButton.value.trim();
            const stats = statsDropdown.value.trim();

            const playerId = player.playerid.trim();
            const batchNoValue = batchNo.trim();


            // Save or send data here
            const playerData = {
              time: time,
              attacker: attacker,
              defender: defender,
              stats: stats,
              playerId: playerId,
              matchId: matchId,
              batchNo: batchNoValue,
            };

            console.log('Saving player data:', playerData);

            // Example of sending data to server or saving locally
            // You could send the data to a server via fetch() if needed:
           fetch('/Scoring/SavePlayerData', {
            //fetch("https://192.168.6.143:5001/Scoring/SavePlayerData",{ 
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(playerData)
              // body: JSON.stringify({
              //   time: time || 0,
              //   attacker: attacker || "0",
              //   defender: defender || "0",
              //   stats: stats || "0",
              //   playerId: playerId || "0",
              //   matchId: matchId || "0",
              //   batchNo: batchNoValue || "0",
              // })
            })
            
            .then(response=>{
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
    return response.text();
    })

    .then(text => {
      console.log('Response text:', text);
      const json = JSON.parse(text || '{}'); // Safely parse JSON
      console.log('Parsed JSON:', json);
    })

  .catch(error => {
              console.error('Error saving player data:', error);
            });

            // Or store it in localStorage (example):
            localStorage.setItem(`player_${player.playerid}_data`, JSON.stringify(playerData));
          });
        });
      } else {
        console.log('No players in play');
        tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
      }
    })
    .catch(error => console.error('Error fetching players:', error));
}


------------------------------------------------
[HttpPost]
public async Task<IActionResult> SavePlayerData([FromBody] PlayerData playerData)
{
    if (ModelState.IsValid)
    {
        Console.WriteLine("Processing player stats...");

        // Check if matchId and batchNo (tourId) already exist in TeamPlayerCurrentMatch
        var existingPlayer = await _context.TeamPlayerCurrentMatch
            .FirstOrDefaultAsync(p => p.AppMatchId == playerData.matchId && p.BatchNo == playerData.batchNo);

        if (existingPlayer != null)
        {
            // Update existing player stats
            Console.WriteLine("Found existing player stats. Updating...");

            existingPlayer.PlayerId = playerData.playerId;
            existingPlayer.TimeSpend = playerData.time;
            existingPlayer.PoleDive = playerData.Stats == 2 ? 1 : 0;
            existingPlayer.SelfOut = playerData.Stats == 6 ? 1 : 0;
            existingPlayer.skydive = playerData.Stats == 5 ? 1 : 0;

            try
            {
                await _context.SaveChangesAsync();  // Asynchronous save
                Console.WriteLine("Player stats updated successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error updating player stats: " + ex.Message);
                return Json(new { success = false, message = ex.Message });
            }
        }
        else
        {
            // Insert new player stats into TeamPlayerCurrentMatch
            Console.WriteLine("No existing record found. Inserting new player stats...");

            var newPlayer = new TeamPlayer_CurrentMatch
            {
                AppMatchId = playerData.matchId,
                BatchNo = playerData.batchNo,
                PlayerId = playerData.playerId,
                TimeSpend = playerData.time,
                PoleDive = playerData.Stats == 2 ? 1 : 0,
                SelfOut = playerData.Stats == 6 ? 1 : 0,
                skydive = playerData.Stats == 5 ? 1 : 0,
            };

            try
            {
                _context.TeamPlayerCurrentMatch.Add(newPlayer);
                await _context.SaveChangesAsync();  // Asynchronous save
                Console.WriteLine("Player stats saved successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error saving player stats: " + ex.Message);
                return Json(new { success = false, message = ex.Message });
            }
        }

        // Now process the InningBatch table
        var newInningBatch = new Inning_Batch
        {
            SeriesId = 1, // You can set this dynamically based on your logic
            MatchId = playerData.matchId,
            InningNumber = playerData.Inning,
            RunNumber = 0, // Default value or calculate based on your logic
            AttackingTeamId = playerData.attackingTeamId,
            DefendingTeamId = playerData.defendingTeamId,
            BatchNumber = playerData.batchNo,
            AttemptNumber = playerData.Turn,
            PlayerId = playerData.playerId,
            TimeOnCourtBatch = TimeSpan.FromSeconds(playerData.time),
            ClockIn = DateTime.UtcNow, // Example, set based on your requirements
            ClockOut = null, // Example, set this later if needed
            TimeOnCourtPlayer = TimeSpan.FromSeconds(playerData.time), // Example
            IsOut = playerData.Stats == 6,
            IsBatchActive = true, // Example, set this dynamically if needed
            IsPowerPlay = false, // Example, set based on your logic
            AppMatchId = playerData.matchId,
            AttackerId = playerData.attacker,
            OutTypeId = playerData.Stats, // Example mapping
            GfxBatchNo = 0 // Example, set this dynamically
        };

        try
        {
            _context.InningBatch.Add(newInningBatch);
            await _context.SaveChangesAsync();  // Save the InningBatch data
            Console.WriteLine("Inning batch data saved successfully.");
            return Json(new { success = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving inning batch data: " + ex.Message);
            return Json(new { success = false, message = ex.Message });
        }
    }

    Console.WriteLine("Model state is not valid.");
    return Json(new { success = false });
}


---------------------js--------------------------------------------------
// // Function to dynamically update and capture batch time
// function captureBatchTime() {
//   const minutes = Math.floor(inningTime / 60);
//   const remainingSeconds = inningTime % 60;

//   const outTimeButton1 = document.getElementById('outTimeButton1');
//   // const outTimeButton2 = document.getElementById('outTimeButton2');
//   // const outTimeButton3 = document.getElementById('outTimeButton3');
  
//     outTimeButton1.textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
//     // outTimeButton2.textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
//     // outTimeButton3.textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
  
// }

// Function to handle button clicks
// document.querySelector('.score-button').addEventListener('click', function () {
//   captureBatchTime();
// });

// Function to fetch players based on batch
// function fetchBatchPlayers() {
//   var urlParams = new URLSearchParams(window.location.search);
//   const matchId = document.getElementById('MatchId').value;
//   const batchNo = document.getElementById('batchNoDropdown').value;
//   var tournamentId = urlParams.get('tournamentId');
//   const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
//   const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 

//   console.log('Match ID:', matchId);
//   console.log('Batch Number:', batchNo);
//   console.log('Is Home Team Attacking:', isHomeAttacking);
//   console.log('Is Away Team Attacking:', isAwayAttacking);
//   console.log('Tournament ID:', tournamentId);

//   // Determine the attacking and defending teams
//   const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
//   const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';

//   fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
//     method: 'GET'
//   })
//     .then(response => {
//       console.log('Response Status:', response.status);
//       if (!response.ok) {
//         throw new Error(`HTTP error! status: ${response.status}`);
//       }
//       return response.json();
//     })
//     .then(data => {
//       console.log('Fetched Data:', data);

//       const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
//       const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
//         id: button.value,
//         name: button.textContent.trim()
//       }));

//       const tableBody = document.querySelector('.grid-container tbody');
//       tableBody.innerHTML = ''; 

//       if (data.players && data.players.length > 0) {
//         console.log('Players found:', data.players);

//         data.players.forEach(player => {
//           const row = document.createElement('tr');

//           // Out Time Cell
//                 const timeCell = document.createElement('td');
//                 const timeInput = document.createElement('input');
//                 timeInput.type = 'text'; 
//                 timeInput.id = `time_${player.playerid}`; 
//                 timeInput.name = 'fname';
//                 timeInput.value = '00'; 
//                 timeCell.appendChild(timeInput);

//           const saveCell = document.createElement('td');
//           const saveButton = document.createElement('button');
//           saveButton.className = 'finalSave';
//           saveButton.id = `fbtn_${player.playerid}`; 
//           saveButton.textContent = 'Save';
//           saveCell.appendChild(saveButton);

//           // Attacking Player Dropdown
//           const attackerCell = document.createElement('td');
//           const attackerDropdown = document.createElement('select');
//           attackerDropdown.className = 'data-form';
//           attackerDropdown.required = true;

//           const defaultAttackingOption = document.createElement('option');
//           defaultAttackingOption.value = '';
//           defaultAttackingOption.selected = true;
//           defaultAttackingOption.textContent = 'Select Attacker';
//           attackerDropdown.appendChild(defaultAttackingOption);

//           attackingPlayers.forEach(attacker => {
//             const option = document.createElement('option');
//             option.value = attacker.id;
//             option.textContent = attacker.name;
//             attackerDropdown.appendChild(option);
//           });

//           // Restore attacker selection from localStorage if available
//           const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
//           if (selectedAttackerId) {
//             console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
//             attackerDropdown.value = selectedAttackerId;
//           }

//           attackerDropdown.dataset.playerId = player.playerid;
//           attackerCell.appendChild(attackerDropdown);

//           // Defending Player Button (No Dropdown)
//           const defenderCell = document.createElement('td');
//           const defenderButton = document.createElement('button');
//           defenderButton.className = 'grid';
          
//               ///exp
//           defenderButton.setAttribute('data-player-id', player.playerid);

//           defenderButton.textContent = player.playername;

//           // Restore defender selection from localStorage if available
//           const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
//           if (selectedDefenderName) {
//             console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
//             defenderButton.textContent = selectedDefenderName;
//           }

//           defenderButton.dataset.playerId = player.playerid;
//           defenderCell.appendChild(defenderButton);

//            const statsCell = document.createElement('td');
//            const statsDropdown = document.createElement('select');
//            statsDropdown.className = 'data-stats';
//            statsDropdown.id = 'stats';
//            statsDropdown.required = true;
 
//            const statsOptions = [
//              { value: '', text: 'STATS' },
//              { value: '1', text: 'RUNNING TOUCH' },
//              { value: '6', text: 'SELF OUT' },
//              { value: '2', text: 'POLE DIVE' },
//              { value: '5', text: 'SKY DIVE' },
//            ];
 
//            statsOptions.forEach(optionData => {
//              const option = document.createElement('option');
//              option.value = optionData.value;
//              option.textContent = optionData.text;
//              statsDropdown.appendChild(option);
//            });
 
//            // Restore stats selection from localStorage
//            const savedStats = localStorage.getItem(`stats_${player.playerid}`);
//            if (savedStats) {
//              console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
//              statsDropdown.value = savedStats;
//            }

//            statsCell.appendChild(statsDropdown);

//           // Append all cells to the row
//           row.appendChild(timeCell);
//           row.appendChild(attackerCell);
//           row.appendChild(defenderCell);
//           row.appendChild(statsCell);
//           row.appendChild(saveCell);

//           // Append the row to the table body
//           tableBody.appendChild(row);

          

//           // Save the selected attacker and defender when changed
//           attackerDropdown.addEventListener('change', () => {
//             console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
//             localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
//           });

//           defenderButton.addEventListener('click', () => {
//             console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
//             localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
//           });

//           statsDropdown.addEventListener('change', () => {
//             console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
//             localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
//           });


//           //save button
          

//         });
//       } else {
//         console.log('No players in play');
//         tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
//       }
//     })
//     .catch(error => console.error('Error fetching players:', error));
// }



------------------------filterbatch ---js---------------
function fetchBatchPlayers() {
    var urlParams = new URLSearchParams(window.location.search);
    const matchId = document.getElementById('MatchId').value;
    const batchNo = document.getElementById('batchNoDropdown').value;
    var tournamentId = urlParams.get('tournamentId');
    const isHomeAttacking = parseInt(document.getElementById('isHomeAttacking').value, 10); 
    const isAwayAttacking = parseInt(document.getElementById('isAwayAttacking').value, 10); 
    var inning = document.getElementById('inndropdown').value;
    var turn = document.getElementById('turndropdown').value;
    var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
    var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
  
    console.log('Match ID:', matchId);
    console.log('Batch Number:', batchNo);
    console.log('Is Home Team Attacking:', isHomeAttacking);
    console.log('Is Away Team Attacking:', isAwayAttacking);
    console.log('Tournament ID:', tournamentId);
    console.log("inning",inning);
    console.log("turn",turn);
    console.log("attackingTeamId",attackingTeamId);
    console.log("defendingTeamId",defendingTeamId);
  
    const attackingList = isHomeAttacking === 1 ? '#inPlayList' : '#playersList';
    const defendingList = isHomeAttacking === 1 ? '#playersList' : '#inPlayList';
  
    fetch(`/Scoring/FilterPlayersByBatch?batchNo=${batchNo}&matchId=${matchId}&isHomeAttacking=${isHomeAttacking}&isAwayAttacking=${isAwayAttacking}&tournamentId=${tournamentId}`, {
      method: 'GET'
    })
      .then(response => {
        console.log('Response Status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Fetched Data:', data);
  
        const attackingPlayerButtons = document.querySelectorAll(`${attackingList} button`);
        const attackingPlayers = Array.from(attackingPlayerButtons).map(button => ({
          id: button.value,
          name: button.textContent.trim()
        }));
  
        const tableBody = document.querySelector('.grid-container tbody');
        tableBody.innerHTML = ''; 
  
        if (data.players && data.players.length > 0) {
          console.log('Players found:', data.players);
  
          data.players.forEach(player => {
            const row = document.createElement('tr');
  
            // Out Time Cell
            const timeCell = document.createElement('td');
            const timeInput = document.createElement('input');
            timeInput.type = 'text'; 
            timeInput.id = `time_${player.playerid}`; 
            timeInput.name = 'fname';
            timeInput.value = '00'; 
            timeCell.appendChild(timeInput);
  
            // Save Button Cell
            const saveCell = document.createElement('td');
            const saveButton = document.createElement('button');
            saveButton.className = 'finalSave';
            saveButton.id = `fbtn_${player.playerid}`; 
            saveButton.textContent = 'Save';
            saveCell.appendChild(saveButton);
  
            // Attacker Dropdown
            const attackerCell = document.createElement('td');
            const attackerDropdown = document.createElement('select');
            attackerDropdown.className = 'data-form';
            attackerDropdown.required = true;
  
            const defaultAttackingOption = document.createElement('option');
            defaultAttackingOption.value = '';
            defaultAttackingOption.selected = true;
            defaultAttackingOption.textContent = 'Select Attacker';
            attackerDropdown.appendChild(defaultAttackingOption);
  
            attackingPlayers.forEach(attacker => {
              const option = document.createElement('option');
              option.value = attacker.id;
              option.textContent = attacker.name;
              attackerDropdown.appendChild(option);
            });
  
            // Restore attacker selection from localStorage if available
            const selectedAttackerId = localStorage.getItem(`attacker_${player.playerid}`);
            if (selectedAttackerId) {
              console.log(`Restoring attacker selection for player ${player.playerid}: ${selectedAttackerId}`);
              attackerDropdown.value = selectedAttackerId;
            }
  
            attackerDropdown.dataset.playerId = player.playerid;
            attackerCell.appendChild(attackerDropdown);
  
            // Defender Button
            const defenderCell = document.createElement('td');
            const defenderButton = document.createElement('button');
            defenderButton.className = 'grid';
            defenderButton.setAttribute('data-player-id', player.playerid);
            defenderButton.textContent = player.playername;
            defenderButton.value=player.playerid;
  
            // Restore defender selection from localStorage if available
            const selectedDefenderName = localStorage.getItem(`defender_${player.playerid}`);
            if (selectedDefenderName) {
              console.log(`Restoring defender selection for player ${player.playerid}: ${selectedDefenderName}`);
              defenderButton.textContent = selectedDefenderName;
            }
  
            defenderButton.dataset.playerId = player.playerid;
            defenderCell.appendChild(defenderButton);
  
            // Stats Dropdown
            const statsCell = document.createElement('td');
            const statsDropdown = document.createElement('select');
            statsDropdown.className = 'data-stats';
            statsDropdown.required = true;
  
            const statsOptions = [
              { value: '', text: 'STATS' },
              { value: '1', text: 'RUNNING TOUCH' },
              { value: '6', text: 'SELF OUT' },
              { value: '2', text: 'POLE DIVE' },
              { value: '5', text: 'SKY DIVE' },
            ];
  
            statsOptions.forEach(optionData => {
              const option = document.createElement('option');
              option.value = optionData.value;
              option.textContent = optionData.text;
              statsDropdown.appendChild(option);
            });
  
            // Restore stats selection from localStorage
            const savedStats = localStorage.getItem(`stats_${player.playerid}`);
            if (savedStats) {
              console.log(`Restoring stats selection for player ${player.playerid}: ${savedStats}`);
              statsDropdown.value = savedStats;
            }
  
            statsCell.appendChild(statsDropdown);
  
            // Append all cells to the row
            row.appendChild(timeCell);
            row.appendChild(attackerCell);
            row.appendChild(defenderCell);
            row.appendChild(statsCell);
            row.appendChild(saveCell);
  
            // Append the row to the table body
            tableBody.appendChild(row);
  
            // Event Listeners to save data
            attackerDropdown.addEventListener('change', () => {
              console.log(`Saving attacker selection for player ${player.playerid}: ${attackerDropdown.value}`);
              localStorage.setItem(`attacker_${player.playerid}`, attackerDropdown.value);
            });
  
            defenderButton.addEventListener('click', () => {
              console.log(`Saving defender selection for player ${player.playerid}: ${defenderButton.textContent}`);
              localStorage.setItem(`defender_${player.playerid}`, defenderButton.textContent);
            });
  
            statsDropdown.addEventListener('change', () => {
              console.log(`Saving stats selection for player ${player.playerid}: ${statsDropdown.value}`);
              localStorage.setItem(`stats_${player.playerid}`, statsDropdown.value);
            });
  
            // Save button click event
            saveButton.addEventListener('click', () => {
              const time = document.getElementById(`time_${player.playerid}`).value.trim();
              const attacker = attackerDropdown.value.trim();
              const defender = defenderButton.value.trim();
              const stats = statsDropdown.value.trim();
  
              const playerId = player.playerid.trim();
              const batchNoValue = batchNo.trim();
              const inningNo=inning;
              const turnNo=turn;
              const attackerid=attackingTeamId.trim();
              const defenderid=defendingTeamId.trim();
  
  
              // Save or send data here
              const playerData = {
                time: time,
                attacker: attacker,
                defender: defender,
                stats: stats,
                playerId: playerId,
                matchId: matchId,
                batchNo: batchNoValue,
                Inning: inningNo,
                Turn: turnNo,
                attackingTeamId: attackerid,
                defendingTeamId: defenderid,
              };
  
              console.log('Saving player data:', playerData);
  
              // Example of sending data to server or saving locally
              // You could send the data to a server via fetch() if needed:
             fetch('/Scoring/SavePlayerData', {
              //fetch("https://192.168.6.143:5001/Scoring/SavePlayerData",{ 
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(playerData)
                // body: JSON.stringify({
                //   time: time || 0,
                //   attacker: attacker || "0",
                //   defender: defender || "0",
                //   stats: stats || "0",
                //   playerId: playerId || "0",
                //   matchId: matchId || "0",
                //   batchNo: batchNoValue || "0",
                // })
              })
              
              .then(response=>{
                if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
                }
      return response.text();
      })
  
      .then(text => {
        console.log('Response text:', text);
        const json = JSON.parse(text || '{}'); 
        console.log('Parsed JSON:', json);
        showPopup("Data is saved");
      })
  
    .catch(error => {
                console.error('Error saving player data:', error);
              });
  
              localStorage.setItem(`player_${player.playerid}_data`, JSON.stringify(playerData));
            });
          });
        } else {
          console.log('No players in play');
          tableBody.innerHTML = '<tr><td colspan="4">No players in play</td></tr>';
        }
      })
      .catch(error => console.error('Error fetching players:', error));
  }
  