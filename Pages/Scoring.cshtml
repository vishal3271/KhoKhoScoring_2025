@page
@model ScoringModel
@{
    ViewData["Title"] = "Home page";
    var hometeamname=Model.homeInplay?.FirstOrDefault()?.teamName;
    var awayteamname=Model.awayInplay?.FirstOrDefault()?.teamName;
    var hometeamid=Model.homeInplay?.FirstOrDefault()?.teamId;
    var awayteamid=Model.awayInplay?.FirstOrDefault()?.teamId;

    var ishometeamattacking=Model.homeInplay?.FirstOrDefault()?.IsAttacking;
    var isawayteamattacking=Model.awayInplay?.FirstOrDefault()?.IsAttacking;

    
     var attackingTeamName = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var defendingTeamName = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamName 
        : Model.awayInplay?.FirstOrDefault()?.teamName;

    var attackingTeamPlayers = Model.IsAttacking == 1 ? Model.homeInplay : Model.awayInplay;
    var defendingTeamPlayers = Model.IsAttacking == 0 ? Model.homeInplay : Model.awayInplay;

    var hometeamplayers=Model.homeInplay;
    var awayteamplayers=Model.awayInplay;

    var attackingBenchPlayers = Model.IsAttacking == 1 ? Model.homeInbench : Model.awayInbench;
    var defendingBenchPlayers = Model.IsAttacking == 0 ? Model.homeInbench : Model.awayInbench;

    var attackingTeamId = Model.IsAttacking == 1 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

    var defendingTeamId = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.teamId?.Trim() 
        : Model.awayInplay?.FirstOrDefault()?.teamId?.Trim();

        
    var appmatchid = Model.IsAttacking == 0 
        ? Model.homeInplay?.FirstOrDefault()?.idMatch 
        : Model.awayInplay?.FirstOrDefault()?.idMatch;

    var tourid=Model.homeInplay?.FirstOrDefault()?.idTournament;

    int homeScore = ViewData["HomeScore"] != null ? (int)ViewData["HomeScore"] : 0;
    int awayScore = ViewData["AwayScore"] != null ? (int)ViewData["AwayScore"] : 0;

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Stats</title>
    <link rel="stylesheet" href="/css/site.css">
    using _24IN_Ultimate_KHO_KHO_VS.Data;
</head>
<body>

<div class="batch-dropdown">
<select class="form-select" id="batchNoDropdown" name="batchNo" onchange="fetchBatchPlayers()" required>
                <option value="" selected>Select Batch No</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
</div>

<div class="inningData">
    <table>
        <thead>
            <tr>
                <th>Inning</th>
                <th>Turn</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                     <select class="form-select" id="inndropdown" name="Inning" required>
                    <option value="" selected>Inn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                </select>
                </td>
                  <td>
                     <select class="form-select" id="turndropdown" name="turn" required>
                    <option value="" selected>Turn</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="timerData">
    <table>
        <thead>
            <tr>
                <th style="background-color: #333;"><button class="editInn" id="EditInnTime">Edit</button></th>
                <th style="background-color: #333;"><button class="editbatch" id="EditBatchTime">Edit</button></th></th>
            </tr>
            <tr>
                <th>Inning Timer</th>
                <th>Batch Timer</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <span class="inningtime" id="inningDisplay">7:00</span>
                </td>
                <td>
                    <span class="normaltimmer" id="turnDisplay">00:00</span>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="startstopbtn" id="startStopTimer">Start / Stop</button>
                </td>
                <td>
                     <button class="resetBatchbtn" id="resetBatchTimer">Reset</button>
                </td>
            </tr>
            <tr>
                <td>  
                  <button class="resetInnbtn" id="resetInningTimer">Reset</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

 <div class="time-container">
    <table>
        <thead>
            <tr>
                <th>OutTime(in Sec)</th>
            </tr>
        </thead>
        <tbody>
          @if (Model.timedatas != null && Model.timedatas.Any())
            {
                @foreach (var item in Model.timedatas)
                {
                    <tr>
                        <td data-time="@item.TurnTimer">@item.TurnTimer</td>
                    </tr>
                }
            }
            else
            {
                <tr><td>No data available.</td></tr>
            }
        </tbody>
    </table>
</div>

<div class="save">
<button class="stats-button" id="clearStorageBtn">Clear</button>
</div>

<div class="undo">
<button class="stats-button" id="undo">Undo</button>
</div>

@* <div class="clockIn">
<button class="stats-button" id="clockIn">Clock In</button>
</div>

<div class="clockOut">
<button class="stats-button" id="clockOut">Clock Out</button>
</div> *@

<div class="grid-container">
    <input type="hidden" id="tourid" value="@tourid" />
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    <input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
    <input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
    <div id="popup" class="popup"></div>
  <table>
        <thead>
            <tr>
                <th>Out Time(in Sec)</th>
                <th>Attacker</th>
                <th>Defeder</th>
                <th>Stats</th>
                <th>Save</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <label for="fname">Time</label>
                    <input type="text" id="fname" name="fname"><br><br>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                 <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
                <td>
                    <button class="finalSave">Save</button>
                </td>
            </tr>
            <tr>
                  <td>
                    <label for="fname">Time</label>
                    <input type="text" id="fname" name="fname"><br><br>
                </td>
                <td>
                     <select class="data-form" id="attackers" required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                     <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                 <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
                <td>
                    <button class="finalSave">Save</button>
                </td>
            </tr>
            <tr>
                  <td>
                    <label for="fname">Time</label>
                    <input type="text" id="fname" name="fname"><br><br>
                </td>
                <td>
                    <select class="data-form" id="attackers"  required>
                                <option value="" selected>attackers</option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                </td>
                <td>
                    <button class="grid" id="turnDisplay">batchplayer</button>
                </td>
                <td>
                     <select class="data-stats" id="stats" required>
                                <option value="" selected>STATS</option>
                                <option value="1">RUNNING TOUCH</option>
                                <option value="6">SELF OUT</option>
                                <option value="2">POLE DIVE</option>
                                <option value="5">SKY DIVE</option>
                            </select>
                </td>
                <td>
                    <button class="finalSave">Save</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>


<div class="scoringData">
    <input type="hidden" id="MatchScoreid" value="@appmatchid" />
    <input type="hidden" id="tourid" value="@tourid" />
    <input type="hidden" id="matchId" value="@appmatchid" />
    <input type="hidden" id="hometeam" value="@hometeamid" />
    <input type="hidden" id="awayteam" value="@awayteamid" />
    <table>
        <thead>
            <tr>
                <th id="homeScoreDisplay">Home</th>
                <th id="awayScoreDisplay">Away</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="home" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="1" onclick="updateScore(this)">+1</button>
                    <button class="score-button" data-team="away" data-score="-1" onclick="updateScore(this)">-1</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="score-button" data-team="home" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="home" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
                <td>
                    <button class="score-button" data-team="away" data-score="2" onclick="updateScore(this)">+2</button>
                    <button class="score-button" data-team="away" data-score="-2" onclick="updateScore(this)">-2</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
        <div class="left-panel">
            <h2 id="attackid" data-teamid="@hometeamid">@hometeamname</h2>
             <input type="hidden" id="MatchId" name="MatchId" value="@appmatchid" />
<input type="hidden" id="isHomeAttacking" value="@ishometeamattacking" />
@* <input type="hidden" id="ishome" value="@ishometeamattacking" /> *@

            <div class="in-play">
                <div class="container-undo">
                    <h3>@(ishometeamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>
                <ul id="inPlayList">
                    @if (hometeamplayers!= null && hometeamplayers.Any())
                    {
                        foreach (var player in hometeamplayers)
                        {
                            <li><button class="lstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                        }
                    }
                    else
                    {
                        <li>No players in play</li>
                    }
                </ul>
            </div>
        </div>

    <div class="stats-panel">
     <table>
    <tr>
        <th>Player Score</th>
        <th>@attackingTeamName SCORE</th>
        <th>STAT</th>
        <th>@defendingTeamName SCORE</th>
        <th>Player Score</th>
    </tr>

            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="1">RUNNING TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="4">POLE TOUCH</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="6">SELF OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                       <button class="stats-button addStatsButton" value="2">POLE DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="3">DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="5">SKY DIVE</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="7">INJURY OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
<tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                        <button class="stats-button addStatsButton" value="0">NOT OUT</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr>
            @* <tr>
                <td value="">0</td>
                <td value="">0</td>  
                <td>
                    <button class="stats-button" id="clearStorageBtn">Clear</button>
                </td> 
                <td>0</td> 
                <td>0</td>
            </tr> *@

</table>
    </div>

    <div class="right-panel">
       <h2 id="defendid" data-teamid="@awayteamid">@awayteamname</h2>
            <div class="in-play">
                <div class="container-undo">
                    <h3>@(isawayteamattacking == 1 ? "Attacking" : "Defending")</h3>
                </div>        

<input type="hidden" id="isAwayAttacking" value="@isawayteamattacking" />
@* <input type="hidden" id="isaway" value="@isawayteamattacking" /> *@
            
                <ul id="playersList">
                @if (awayteamplayers != null && awayteamplayers.Any())
                {
                foreach (var player in awayteamplayers)
                {
                    <li><button class="rstats-button" value="@player.playerid">@player.playername - B(@player.batchno)</button></li>
                }
            }
            else
            {
                <li>No players in play</li>
            }
                </ul>

                    </ul>
            </div>
    </div>

</div>

<script>

///scoringUpdate
function updateScore(button) {

    var inning = document.getElementById('inndropdown').value;
    var turn = document.getElementById('turndropdown').value;

    if (!timerRunning || !inning || !turn) {
        alert("Please start timmer first and select inning and turn");
        return;
    }
@* 
    if () {
        alert('Please select inning and turn');
        return;
    } *@

    var team = button.getAttribute("data-team"); 
    var scoreChange = parseInt(button.getAttribute("data-score"), 10); 
    var appMatchId = document.getElementById("matchId").value;
    var matchScoreId = document.getElementById("MatchScoreid").value;
    var tourId = document.getElementById("tourid").value;
    var tieId = "0"
    var homeTeam = document.getElementById("hometeam").value;
    var awayTeam = document.getElementById("awayteam").value;
    var winningTeam ="0";
    var isHomeTeamTrump = 0; 
    var isAwayTeamTrump = 0;

    // Get current timer values
    var inningDisplay = document.getElementById('inningDisplay').textContent.split(':');
    var turnDisplay = document.getElementById('turnDisplay').textContent.split(':');
    var inningTimer = parseInt(inningDisplay[0]) * 60 + parseInt(inningDisplay[1]);
    var turnTimer = parseInt(turnDisplay[0]) * 60 + parseInt(turnDisplay[1]);

    // Construct data object
    var data = {
        Team:team,
        MatchScoreid: matchScoreId || "0",
        tourid: tourId || "0",
        tieid: tieId || "0",
        matchId: appMatchId,
        ScoreChange: scoreChange,
        hometeam: homeTeam || "0",
        awayteam: awayTeam || "0",
        winningteam: winningTeam || "0",
        ishometeamtrump: isHomeTeamTrump,
        isawayteamtrump: isAwayTeamTrump,
        InningTimer: inningTimer,
        TurnTimer: turnTimer,
    };

    console.log("Sending data to backend:", data);

    // Send data to backend
    fetch('/Scoring/AddScore', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        @* body: JSON.stringify({ *@
        body: JSON.stringify({
            Team:team,
            MatchScoreid: matchScoreId || "0",
            tourid: tourId || "0",
            tieid: tieId || "0",
            matchId: appMatchId,
            ScoreChange: scoreChange,
            hometeam: homeTeam || "0",
            awayteam: awayTeam || "0",
            winningteam: winningTeam || "0",
            ishometeamtrump: isHomeTeamTrump,
            isawayteamtrump: isAwayTeamTrump,
            InningTimer: inningTimer,
            TurnTimer: turnTimer
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log("Response from backend:", data);
            if (data.success) {
                var scores = data.gamescore.split(" - ");
                var homeScore = scores[0];
                var awayScore = scores[1];

                
                document.getElementById("homeScoreDisplay").innerText = "Home - " + homeScore;
                document.getElementById("awayScoreDisplay").innerText = "Away - " + awayScore;

             var timedataTableBody = document.querySelector(".time-container tbody");
                timedataTableBody.innerHTML = ''; 



//formater seconds to mm:ss
function formatTime(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;

    remainingSeconds = remainingSeconds < 10 ? '0' + remainingSeconds : remainingSeconds;

    return minutes + ":" + remainingSeconds;
}


data.timedatas.forEach(item => {
               if (!item || typeof item.turnTimer === 'undefined') {
                        console.warn("Invalid timedata item:", item);
                        return;
                    }

                    var row = document.createElement('tr');
                    var cell = document.createElement('td');     

                    var formattedTime = formatTime(item.turnTimer);

                    console.log("Formatted time:", formattedTime);                   
                    cell.setAttribute('data-time', formattedTime);
                    @* cell.textContent = formattedTime; *@
                    cell.textContent = formattedTime+ " / " + item.turnTimer+"sec";
                    row.appendChild(cell);
                    timedataTableBody.appendChild(row);

            });
             } else {
                console.error("Error updating score:", data.message);
            } 
        })
        .catch(error => console.error("Error updating score:", error));
}


///timers

var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetInningTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
   
});

document.getElementById('resetBatchTimer').addEventListener('click', function() {
    clearInterval(turnTimer);
    turnTimer = null;
    turnTime = 0;  
    updateTurnDisplay(turnTime);

   if (timerRunning && inningTimer === null) {
        document.getElementById('startStopTimer').textContent = "Start";
        timerRunning = false;
   }

 if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Reset";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('EditInnTime').addEventListener('click', function() {
    let newTime = prompt("Enter new time for the Inning Timer (mm:ss):", "7:00");
    if (newTime && isValidTime(newTime)) {
        inningTime = parseTime(newTime);
        updateInningDisplay(inningTime);
    } else if (newTime) {
        alert("Invalid time format. Please enter in mm:ss format.");
    }
});

document.getElementById('EditBatchTime').addEventListener('click', function() {
    let newTime = prompt("Enter new time for the Batch Timer (mm:ss):", "00:00");
    if (newTime && isValidTime(newTime)) {
        turnTime = parseTime(newTime);
        updateTurnDisplay(turnTime);
    } else if (newTime) {
        alert("Invalid time format. Please enter in mm:ss format.");
    }
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
}

function isValidTime(timeStr) {
    return /^\d{1,2}:\d{2}$/.test(timeStr);
}

function parseTime(timeStr) {
    let [minutes, seconds] = timeStr.split(':').map(Number);
    return minutes * 60 + seconds;
}


@* var inningTimer = null;
var turnTimer = null;
var inningTime = 7 * 60;  
var turnTime = 0;
var timerRunning = false;  

document.getElementById('startStopTimer').addEventListener('click', function() {
    if (!timerRunning) {
        inningTimer = setInterval(function() {
            if (inningTime > 0) {
                inningTime--;
                updateInningDisplay(inningTime);
            } else {
                clearInterval(inningTimer);
                inningTimer = null;
                alert("Inning Timer finished!");
            }
        }, 1000);

        turnTimer = setInterval(function() {
            turnTime++;
            updateTurnDisplay(turnTime);
        }, 1000);

        this.textContent = "Stop";
        timerRunning = true;
    } else {
        clearInterval(inningTimer);
        clearInterval(turnTimer);
        inningTimer = null;
        turnTimer = null;

        this.textContent = "Start";
        timerRunning = false;
    }
});

document.getElementById('resetTimer').addEventListener('click', function() {
    clearInterval(inningTimer);
    clearInterval(turnTimer);
    inningTimer = null;
    turnTimer = null;
    inningTime = 7 * 60;  
    turnTime = 0;  
    updateInningDisplay(inningTime);
    updateTurnDisplay(turnTime);

    document.getElementById('startStopTimer').textContent = "Start";
    timerRunning = false;
});

function updateInningDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('inningDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function updateTurnDisplay(seconds) {
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = seconds % 60;
    document.getElementById('turnDisplay').textContent = `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;
}

function formatTime(time) {
    return time < 10 ? '0' + time : time;
} *@


////////////////Scoring
document.querySelectorAll('.lstats-button').forEach(button => {
  button.value = button.value.trim();
});

document.querySelectorAll('.rstats-button').forEach(button => {
  button.value = button.value.trim();
});

var h2Defend = document.getElementById('defendid');
var h2Attack = document.getElementById('attackid');

document.querySelectorAll('.defendid').forEach(element => {
  h2Defend.textContent = element.textContent.trim(); 
});

document.querySelectorAll('.attackid').forEach(element => {
  h2Attack.textContent = element.textContent.trim();
});


  document.querySelectorAll('.addStatsButton').forEach(button => {
  button.addEventListener('click', handleStatsButtonClick); 
  });
  
  function handleStatsButtonClick(event){  
      var statsbutton = event.target.value;
      var attackingPlayerId = document.querySelector('.lstats-button.selected')?.value || null;
      var defendingPlayerId = document.querySelector('.rstats-button.selected')?.value || null;
      var inning = document.getElementById('inndropdown').value;
      var turn = document.getElementById('turndropdown').value;
      var attackingTeamId=document.getElementById('attackid').getAttribute('data-teamid');
      var defendingTeamId=document.getElementById('defendid').getAttribute('data-teamid');
      var appMatchId=document.getElementById('MatchId').value;

//////time formater  

console.log("Inning Time:", inningTime);
console.log("Turn Time:", turnTime);
console.log("attackingPlayerId",attackingPlayerId);
console.log("defendingPlayerId",defendingPlayerId);
console.log("inning",inning);
console.log("turn",turn);
console.log("attackingTeamId",attackingTeamId);
console.log("defendingTeamId",defendingTeamId);
console.log("addStatsButton",statsbutton);
console.log("appMatchId",appMatchId);


      if (!attackingPlayerId && !defendingPlayerId) {
          alert('Please select one player to add points');
          return;
      }
      if (!inning || !turn) {
        alert('Please select inning and turn');
        return;
    }

      var data = {
          AttackingPlayerId: attackingPlayerId || null, 
          DefendingPlayerId: defendingPlayerId || null,
          Inning: inning,
          Turn: turn,
          AttackingTeamId: attackingTeamId, 
          DefendingTeamId: defendingTeamId, 
          OutTypeId: statsbutton,
          AppMatchId: appMatchId,
          InningTimer: inningTime,
          TurnTimer: turnTime
      };

console.log("Sending data to backend:",data);

      fetch('/Scoring/AddStats', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            AttackingPlayerId: attackingPlayerId || "0",
            DefendingPlayerId: defendingPlayerId || "0",
            Inning: inning || "0",
            Turn: turn || "0",
            AttackingTeamId: attackingTeamId || "0",
            DefendingTeamId: defendingTeamId || "0",
            OutTypeId: statsbutton,
            AppMatchId: appMatchId,
            InningTimer: inningTime.toString() || "0",
            TurnTimer: turnTime.toString() || "0"
        }),


      })
      .then(response => response.json())
      .then(result => {
          if (!result.success) {
              console.error('Error saving stats:', result.message);
              //location.reload();
          } 
      })
      .catch(err => {
          console.error(err);
          alert('An error occurred while adding data.');
      });
  }

function convertSecondsToTime(seconds) {
  var minutes = Math.floor(seconds / 60);  
  var remainingSeconds = seconds % 60;   
  return `${formatTime(minutes)}:${formatTime(remainingSeconds)}`;  
}

 document.querySelectorAll('.lstats-button, .rstats-button').forEach(button => {
  button.addEventListener('click', () => {
      if (button.classList.contains('lstats-button')) {
          document.querySelectorAll('.lstats-button').forEach(b => b.classList.remove('selected'));
      } else if (button.classList.contains('rstats-button')) {
          document.querySelectorAll('.rstats-button').forEach(b => b.classList.remove('selected'));
      }

      button.classList.add('selected');

      console.log(`Button ${button.value} toggled: ${button.classList.contains('selected')}`);
      });
  });


</script>

</body>
</html>
